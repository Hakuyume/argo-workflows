# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import re  # noqa: F401
import sys  # noqa: F401
import typing
import urllib3
import functools  # noqa: F401
from urllib3._collections import HTTPHeaderDict

from argo_workflows import api_client, exceptions
import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)

from argo_workflows.model.grpc_gateway_runtime_error import GrpcGatewayRuntimeError
from argo_workflows.model.io_argoproj_workflow_v1alpha1_label_values import IoArgoprojWorkflowV1alpha1LabelValues

# query params
ListOptionsLabelSelectorSchema = StrSchema
ListOptionsFieldSelectorSchema = StrSchema
ListOptionsWatchSchema = BoolSchema
ListOptionsAllowWatchBookmarksSchema = BoolSchema
ListOptionsResourceVersionSchema = StrSchema
ListOptionsResourceVersionMatchSchema = StrSchema
ListOptionsTimeoutSecondsSchema = StrSchema
ListOptionsLimitSchema = StrSchema
ListOptionsContinueSchema = StrSchema
RequestRequiredQueryParams = typing.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing.TypedDict(
    'RequestOptionalQueryParams',
    {
        'listOptions.labelSelector': ListOptionsLabelSelectorSchema,
        'listOptions.fieldSelector': ListOptionsFieldSelectorSchema,
        'listOptions.watch': ListOptionsWatchSchema,
        'listOptions.allowWatchBookmarks': ListOptionsAllowWatchBookmarksSchema,
        'listOptions.resourceVersion': ListOptionsResourceVersionSchema,
        'listOptions.resourceVersionMatch': ListOptionsResourceVersionMatchSchema,
        'listOptions.timeoutSeconds': ListOptionsTimeoutSecondsSchema,
        'listOptions.limit': ListOptionsLimitSchema,
        'listOptions.continue': ListOptionsContinueSchema,
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_list_options_label_selector = api_client.QueryParameter(
    name="listOptions.labelSelector",
    schema=ListOptionsLabelSelectorSchema,
)
request_query_list_options_field_selector = api_client.QueryParameter(
    name="listOptions.fieldSelector",
    schema=ListOptionsFieldSelectorSchema,
)
request_query_list_options_watch = api_client.QueryParameter(
    name="listOptions.watch",
    schema=ListOptionsWatchSchema,
)
request_query_list_options_allow_watch_bookmarks = api_client.QueryParameter(
    name="listOptions.allowWatchBookmarks",
    schema=ListOptionsAllowWatchBookmarksSchema,
)
request_query_list_options_resource_version = api_client.QueryParameter(
    name="listOptions.resourceVersion",
    schema=ListOptionsResourceVersionSchema,
)
request_query_list_options_resource_version_match = api_client.QueryParameter(
    name="listOptions.resourceVersionMatch",
    schema=ListOptionsResourceVersionMatchSchema,
)
request_query_list_options_timeout_seconds = api_client.QueryParameter(
    name="listOptions.timeoutSeconds",
    schema=ListOptionsTimeoutSecondsSchema,
)
request_query_list_options_limit = api_client.QueryParameter(
    name="listOptions.limit",
    schema=ListOptionsLimitSchema,
)
request_query_list_options_continue = api_client.QueryParameter(
    name="listOptions.continue",
    schema=ListOptionsContinueSchema,
)
_path = '/api/v1/archived-workflows-label-values'
_method = 'GET'
_auth = [
    'BearerToken',
]
SchemaFor200ResponseBodyApplicationJson = IoArgoprojWorkflowV1alpha1LabelValues


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor0ResponseBodyApplicationJson = GrpcGatewayRuntimeError


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor0ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'application/json',
)


class ListArchivedWorkflowLabelValues(api_client.Api):

    def list_archived_workflow_label_values(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs(RequestQueryParams, query_params)

        _query_params = []
        for parameter in (
            request_query_list_options_label_selector,
            request_query_list_options_field_selector,
            request_query_list_options_watch,
            request_query_list_options_allow_watch_bookmarks,
            request_query_list_options_resource_version,
            request_query_list_options_resource_version_match,
            request_query_list_options_timeout_seconds,
            request_query_list_options_limit,
            request_query_list_options_continue,
        ):
            parameter_data = query_params.get(parameter.name, unset)
            if parameter_data is unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _query_params.extend(serialized_data)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=_path,
            method=_method,
            query_params=tuple(_query_params),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                default_response = _status_code_to_response.get('default')
                if default_response:
                    api_response = default_response.deserialize(response, self.api_client.configuration)
                else:
                    api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response
