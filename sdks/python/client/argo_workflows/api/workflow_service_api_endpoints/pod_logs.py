# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import re  # noqa: F401
import sys  # noqa: F401
import typing
import urllib3
import functools  # noqa: F401
from urllib3._collections import HTTPHeaderDict

from argo_workflows import api_client, exceptions
import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)

from argo_workflows.model.grpc_gateway_runtime_error import GrpcGatewayRuntimeError
from argo_workflows.model.io_argoproj_workflow_v1alpha1_log_entry import IoArgoprojWorkflowV1alpha1LogEntry
from argo_workflows.model.grpc_gateway_runtime_stream_error import GrpcGatewayRuntimeStreamError

# query params
LogOptionsContainerSchema = StrSchema
LogOptionsFollowSchema = BoolSchema
LogOptionsPreviousSchema = BoolSchema
LogOptionsSinceSecondsSchema = StrSchema
LogOptionsSinceTimeSecondsSchema = StrSchema
LogOptionsSinceTimeNanosSchema = Int32Schema
LogOptionsTimestampsSchema = BoolSchema
LogOptionsTailLinesSchema = StrSchema
LogOptionsLimitBytesSchema = StrSchema
LogOptionsInsecureSkipTLSVerifyBackendSchema = BoolSchema
GrepSchema = StrSchema
SelectorSchema = StrSchema
RequestRequiredQueryParams = typing.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing.TypedDict(
    'RequestOptionalQueryParams',
    {
        'logOptions.container': LogOptionsContainerSchema,
        'logOptions.follow': LogOptionsFollowSchema,
        'logOptions.previous': LogOptionsPreviousSchema,
        'logOptions.sinceSeconds': LogOptionsSinceSecondsSchema,
        'logOptions.sinceTime.seconds': LogOptionsSinceTimeSecondsSchema,
        'logOptions.sinceTime.nanos': LogOptionsSinceTimeNanosSchema,
        'logOptions.timestamps': LogOptionsTimestampsSchema,
        'logOptions.tailLines': LogOptionsTailLinesSchema,
        'logOptions.limitBytes': LogOptionsLimitBytesSchema,
        'logOptions.insecureSkipTLSVerifyBackend': LogOptionsInsecureSkipTLSVerifyBackendSchema,
        'grep': GrepSchema,
        'selector': SelectorSchema,
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_log_options_container = api_client.QueryParameter(
    name="logOptions.container",
    schema=LogOptionsContainerSchema,
)
request_query_log_options_follow = api_client.QueryParameter(
    name="logOptions.follow",
    schema=LogOptionsFollowSchema,
)
request_query_log_options_previous = api_client.QueryParameter(
    name="logOptions.previous",
    schema=LogOptionsPreviousSchema,
)
request_query_log_options_since_seconds = api_client.QueryParameter(
    name="logOptions.sinceSeconds",
    schema=LogOptionsSinceSecondsSchema,
)
request_query_log_options_since_time_seconds = api_client.QueryParameter(
    name="logOptions.sinceTime.seconds",
    schema=LogOptionsSinceTimeSecondsSchema,
)
request_query_log_options_since_time_nanos = api_client.QueryParameter(
    name="logOptions.sinceTime.nanos",
    schema=LogOptionsSinceTimeNanosSchema,
)
request_query_log_options_timestamps = api_client.QueryParameter(
    name="logOptions.timestamps",
    schema=LogOptionsTimestampsSchema,
)
request_query_log_options_tail_lines = api_client.QueryParameter(
    name="logOptions.tailLines",
    schema=LogOptionsTailLinesSchema,
)
request_query_log_options_limit_bytes = api_client.QueryParameter(
    name="logOptions.limitBytes",
    schema=LogOptionsLimitBytesSchema,
)
request_query_log_options_insecure_skip_tls_verify_backend = api_client.QueryParameter(
    name="logOptions.insecureSkipTLSVerifyBackend",
    schema=LogOptionsInsecureSkipTLSVerifyBackendSchema,
)
request_query_grep = api_client.QueryParameter(
    name="grep",
    schema=GrepSchema,
)
request_query_selector = api_client.QueryParameter(
    name="selector",
    schema=SelectorSchema,
)
# path params
NamespaceSchema = StrSchema
NameSchema = StrSchema
PodNameSchema = StrSchema
RequestRequiredPathParams = typing.TypedDict(
    'RequestRequiredPathParams',
    {
        'namespace': NamespaceSchema,
        'name': NameSchema,
        'podName': PodNameSchema,
    }
)
RequestOptionalPathParams = typing.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_namespace = api_client.PathParameter(
    name="namespace",
    schema=NamespaceSchema,
    required=True,
)
request_path_name = api_client.PathParameter(
    name="name",
    schema=NameSchema,
    required=True,
)
request_path_pod_name = api_client.PathParameter(
    name="podName",
    schema=PodNameSchema,
    required=True,
)
_path = '/api/v1/workflows/{namespace}/{name}/{podName}/log'
_method = 'GET'
_auth = [
    'BearerToken',
]


class SchemaFor200ResponseBodyApplicationJson(
    DictSchema
):

    @classmethod
    @property
    def error(cls) -> typing.Type['GrpcGatewayRuntimeStreamError']:
        return GrpcGatewayRuntimeStreamError

    @classmethod
    @property
    def result(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1LogEntry']:
        return IoArgoprojWorkflowV1alpha1LogEntry


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        error: typing.Union['GrpcGatewayRuntimeStreamError', Unset] = unset,
        result: typing.Union['IoArgoprojWorkflowV1alpha1LogEntry', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            error=error,
            result=result,
            _configuration=_configuration,
            **kwargs,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor0ResponseBodyApplicationJson = GrpcGatewayRuntimeError


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor0ResponseBodyApplicationJson,
    ]
    headers: Unset = unset


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'application/json',
)


class PodLogs(api_client.Api):

    def pod_logs(
        self: api_client.Api,
        query_params: RequestQueryParams = frozendict(),
        path_params: RequestPathParams = frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization
    ]:
        """
        DEPRECATED: Cannot work via HTTP if podName is an empty string. Use WorkflowLogs.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs(RequestPathParams, path_params)

        _path_params = {}
        for parameter in (
            request_path_namespace,
            request_path_name,
            request_path_pod_name,
        ):
            parameter_data = path_params.get(parameter.name, unset)
            if parameter_data is unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)

        _query_params = []
        for parameter in (
            request_query_log_options_container,
            request_query_log_options_follow,
            request_query_log_options_previous,
            request_query_log_options_since_seconds,
            request_query_log_options_since_time_seconds,
            request_query_log_options_since_time_nanos,
            request_query_log_options_timestamps,
            request_query_log_options_tail_lines,
            request_query_log_options_limit_bytes,
            request_query_log_options_insecure_skip_tls_verify_backend,
            request_query_grep,
            request_query_selector,
        ):
            parameter_data = query_params.get(parameter.name, unset)
            if parameter_data is unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _query_params.extend(serialized_data)

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=_path,
            method=_method,
            path_params=_path_params,
            query_params=tuple(_query_params),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                default_response = _status_code_to_response.get('default')
                if default_response:
                    api_response = default_response.deserialize(response, self.api_client.configuration)
                else:
                    api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response
