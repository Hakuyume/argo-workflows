# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class PersistentVolumeClaimSpec(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
    """
    
    
    class accessModes(
        ListSchema
    ):
        _items = StrSchema

    @classmethod
    @property
    def dataSource(cls) -> typing.Type['TypedLocalObjectReference']:
        return TypedLocalObjectReference

    @classmethod
    @property
    def dataSourceRef(cls) -> typing.Type['TypedLocalObjectReference']:
        return TypedLocalObjectReference

    @classmethod
    @property
    def resources(cls) -> typing.Type['ResourceRequirements']:
        return ResourceRequirements

    @classmethod
    @property
    def selector(cls) -> typing.Type['LabelSelector']:
        return LabelSelector
    storageClassName = StrSchema
    volumeMode = StrSchema
    volumeName = StrSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        accessModes: typing.Union[accessModes, Unset] = unset,
        dataSource: typing.Union['TypedLocalObjectReference', Unset] = unset,
        dataSourceRef: typing.Union['TypedLocalObjectReference', Unset] = unset,
        resources: typing.Union['ResourceRequirements', Unset] = unset,
        selector: typing.Union['LabelSelector', Unset] = unset,
        storageClassName: typing.Union[storageClassName, Unset] = unset,
        volumeMode: typing.Union[volumeMode, Unset] = unset,
        volumeName: typing.Union[volumeName, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'PersistentVolumeClaimSpec':
        return super().__new__(
            cls,
            *args,
            accessModes=accessModes,
            dataSource=dataSource,
            dataSourceRef=dataSourceRef,
            resources=resources,
            selector=selector,
            storageClassName=storageClassName,
            volumeMode=volumeMode,
            volumeName=volumeName,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.label_selector import LabelSelector
from argo_workflows.model.resource_requirements import ResourceRequirements
from argo_workflows.model.typed_local_object_reference import TypedLocalObjectReference
