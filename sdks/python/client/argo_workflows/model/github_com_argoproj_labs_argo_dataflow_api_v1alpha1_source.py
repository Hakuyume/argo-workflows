# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class GithubComArgoprojLabsArgoDataflowApiV1alpha1Source(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @classmethod
    @property
    def cron(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Cron']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Cron

    @classmethod
    @property
    def db(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource

    @classmethod
    @property
    def http(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSource']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSource

    @classmethod
    @property
    def jetstream(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1JetStreamSource']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1JetStreamSource

    @classmethod
    @property
    def kafka(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSource']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSource
    name = StrSchema

    @classmethod
    @property
    def retry(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff

    @classmethod
    @property
    def s3(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source

    @classmethod
    @property
    def stan(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN

    @classmethod
    @property
    def volume(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        cron: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Cron', Unset] = unset,
        db: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource', Unset] = unset,
        http: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSource', Unset] = unset,
        jetstream: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1JetStreamSource', Unset] = unset,
        kafka: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSource', Unset] = unset,
        name: typing.Union[name, Unset] = unset,
        retry: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff', Unset] = unset,
        s3: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source', Unset] = unset,
        stan: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN', Unset] = unset,
        volume: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Source':
        return super().__new__(
            cls,
            *args,
            cron=cron,
            db=db,
            http=http,
            jetstream=jetstream,
            kafka=kafka,
            name=name,
            retry=retry,
            s3=s3,
            stan=stan,
            volume=volume,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_backoff import GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_cron import GithubComArgoprojLabsArgoDataflowApiV1alpha1Cron
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_db_source import GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_http_source import GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSource
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_jet_stream_source import GithubComArgoprojLabsArgoDataflowApiV1alpha1JetStreamSource
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_kafka_source import GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSource
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_s3_source import GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Source
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_stan import GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_volume_source import GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource
