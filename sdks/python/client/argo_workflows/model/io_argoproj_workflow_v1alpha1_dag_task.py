# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class IoArgoprojWorkflowV1alpha1DAGTask(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    DAGTask represents a node in the graph during DAG execution
    """
    _required_property_names = set((
        'name',
    ))

    @classmethod
    @property
    def arguments(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Arguments']:
        return IoArgoprojWorkflowV1alpha1Arguments

    @classmethod
    @property
    def continueOn(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1ContinueOn']:
        return IoArgoprojWorkflowV1alpha1ContinueOn
    
    
    class dependencies(
        ListSchema
    ):
        _items = StrSchema
    depends = StrSchema
    
    
    class hooks(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1LifecycleHook']:
            return IoArgoprojWorkflowV1alpha1LifecycleHook
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'hooks':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )

    @classmethod
    @property
    def inline(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Template']:
        return IoArgoprojWorkflowV1alpha1Template
    name = StrSchema
    onExit = StrSchema
    template = StrSchema

    @classmethod
    @property
    def templateRef(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1TemplateRef']:
        return IoArgoprojWorkflowV1alpha1TemplateRef
    when = StrSchema
    
    
    class withItems(
        ListSchema
    ):
        _items = DictSchema
    withParam = StrSchema

    @classmethod
    @property
    def withSequence(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Sequence']:
        return IoArgoprojWorkflowV1alpha1Sequence


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        name: name,
        arguments: typing.Union['IoArgoprojWorkflowV1alpha1Arguments', Unset] = unset,
        continueOn: typing.Union['IoArgoprojWorkflowV1alpha1ContinueOn', Unset] = unset,
        dependencies: typing.Union[dependencies, Unset] = unset,
        depends: typing.Union[depends, Unset] = unset,
        hooks: typing.Union[hooks, Unset] = unset,
        inline: typing.Union['IoArgoprojWorkflowV1alpha1Template', Unset] = unset,
        onExit: typing.Union[onExit, Unset] = unset,
        template: typing.Union[template, Unset] = unset,
        templateRef: typing.Union['IoArgoprojWorkflowV1alpha1TemplateRef', Unset] = unset,
        when: typing.Union[when, Unset] = unset,
        withItems: typing.Union[withItems, Unset] = unset,
        withParam: typing.Union[withParam, Unset] = unset,
        withSequence: typing.Union['IoArgoprojWorkflowV1alpha1Sequence', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'IoArgoprojWorkflowV1alpha1DAGTask':
        return super().__new__(
            cls,
            *args,
            name=name,
            arguments=arguments,
            continueOn=continueOn,
            dependencies=dependencies,
            depends=depends,
            hooks=hooks,
            inline=inline,
            onExit=onExit,
            template=template,
            templateRef=templateRef,
            when=when,
            withItems=withItems,
            withParam=withParam,
            withSequence=withSequence,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.io_argoproj_workflow_v1alpha1_arguments import IoArgoprojWorkflowV1alpha1Arguments
from argo_workflows.model.io_argoproj_workflow_v1alpha1_continue_on import IoArgoprojWorkflowV1alpha1ContinueOn
from argo_workflows.model.io_argoproj_workflow_v1alpha1_lifecycle_hook import IoArgoprojWorkflowV1alpha1LifecycleHook
from argo_workflows.model.io_argoproj_workflow_v1alpha1_sequence import IoArgoprojWorkflowV1alpha1Sequence
from argo_workflows.model.io_argoproj_workflow_v1alpha1_template import IoArgoprojWorkflowV1alpha1Template
from argo_workflows.model.io_argoproj_workflow_v1alpha1_template_ref import IoArgoprojWorkflowV1alpha1TemplateRef
