# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class IoArgoprojEventsV1alpha1HDFSEventSource(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    
    
    class addresses(
        ListSchema
    ):
        _items = StrSchema
    checkInterval = StrSchema

    @classmethod
    @property
    def filter(cls) -> typing.Type['IoArgoprojEventsV1alpha1EventSourceFilter']:
        return IoArgoprojEventsV1alpha1EventSourceFilter
    hdfsUser = StrSchema

    @classmethod
    @property
    def krbCCacheSecret(cls) -> typing.Type['SecretKeySelector']:
        return SecretKeySelector

    @classmethod
    @property
    def krbConfigConfigMap(cls) -> typing.Type['ConfigMapKeySelector']:
        return ConfigMapKeySelector

    @classmethod
    @property
    def krbKeytabSecret(cls) -> typing.Type['SecretKeySelector']:
        return SecretKeySelector
    krbRealm = StrSchema
    krbServicePrincipalName = StrSchema
    krbUsername = StrSchema
    
    
    class metadata(
        DictSchema
    ):
        _additional_properties = StrSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'metadata':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    type = StrSchema

    @classmethod
    @property
    def watchPathConfig(cls) -> typing.Type['IoArgoprojEventsV1alpha1WatchPathConfig']:
        return IoArgoprojEventsV1alpha1WatchPathConfig


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        addresses: typing.Union[addresses, Unset] = unset,
        checkInterval: typing.Union[checkInterval, Unset] = unset,
        filter: typing.Union['IoArgoprojEventsV1alpha1EventSourceFilter', Unset] = unset,
        hdfsUser: typing.Union[hdfsUser, Unset] = unset,
        krbCCacheSecret: typing.Union['SecretKeySelector', Unset] = unset,
        krbConfigConfigMap: typing.Union['ConfigMapKeySelector', Unset] = unset,
        krbKeytabSecret: typing.Union['SecretKeySelector', Unset] = unset,
        krbRealm: typing.Union[krbRealm, Unset] = unset,
        krbServicePrincipalName: typing.Union[krbServicePrincipalName, Unset] = unset,
        krbUsername: typing.Union[krbUsername, Unset] = unset,
        metadata: typing.Union[metadata, Unset] = unset,
        type: typing.Union[type, Unset] = unset,
        watchPathConfig: typing.Union['IoArgoprojEventsV1alpha1WatchPathConfig', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'IoArgoprojEventsV1alpha1HDFSEventSource':
        return super().__new__(
            cls,
            *args,
            addresses=addresses,
            checkInterval=checkInterval,
            filter=filter,
            hdfsUser=hdfsUser,
            krbCCacheSecret=krbCCacheSecret,
            krbConfigConfigMap=krbConfigConfigMap,
            krbKeytabSecret=krbKeytabSecret,
            krbRealm=krbRealm,
            krbServicePrincipalName=krbServicePrincipalName,
            krbUsername=krbUsername,
            metadata=metadata,
            type=type,
            watchPathConfig=watchPathConfig,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.config_map_key_selector import ConfigMapKeySelector
from argo_workflows.model.io_argoproj_events_v1alpha1_event_source_filter import IoArgoprojEventsV1alpha1EventSourceFilter
from argo_workflows.model.io_argoproj_events_v1alpha1_watch_path_config import IoArgoprojEventsV1alpha1WatchPathConfig
from argo_workflows.model.secret_key_selector import SecretKeySelector
