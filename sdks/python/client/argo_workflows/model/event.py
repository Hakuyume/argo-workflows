# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class Event(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
    """
    _required_property_names = set((
        'involvedObject',
        'metadata',
    ))
    action = StrSchema
    apiVersion = StrSchema
    count = IntSchema
    eventTime = DateTimeSchema
    firstTimestamp = DateTimeSchema

    @classmethod
    @property
    def involvedObject(cls) -> typing.Type['ObjectReference']:
        return ObjectReference
    kind = StrSchema
    lastTimestamp = DateTimeSchema
    message = StrSchema

    @classmethod
    @property
    def metadata(cls) -> typing.Type['ObjectMeta']:
        return ObjectMeta
    reason = StrSchema

    @classmethod
    @property
    def related(cls) -> typing.Type['ObjectReference']:
        return ObjectReference
    reportingComponent = StrSchema
    reportingInstance = StrSchema

    @classmethod
    @property
    def series(cls) -> typing.Type['EventSeries']:
        return EventSeries

    @classmethod
    @property
    def source(cls) -> typing.Type['EventSource']:
        return EventSource
    type = StrSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        involvedObject: involvedObject,
        metadata: metadata,
        action: typing.Union[action, Unset] = unset,
        apiVersion: typing.Union[apiVersion, Unset] = unset,
        count: typing.Union[count, Unset] = unset,
        eventTime: typing.Union[eventTime, Unset] = unset,
        firstTimestamp: typing.Union[firstTimestamp, Unset] = unset,
        kind: typing.Union[kind, Unset] = unset,
        lastTimestamp: typing.Union[lastTimestamp, Unset] = unset,
        message: typing.Union[message, Unset] = unset,
        reason: typing.Union[reason, Unset] = unset,
        related: typing.Union['ObjectReference', Unset] = unset,
        reportingComponent: typing.Union[reportingComponent, Unset] = unset,
        reportingInstance: typing.Union[reportingInstance, Unset] = unset,
        series: typing.Union['EventSeries', Unset] = unset,
        source: typing.Union['EventSource', Unset] = unset,
        type: typing.Union[type, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'Event':
        return super().__new__(
            cls,
            *args,
            involvedObject=involvedObject,
            metadata=metadata,
            action=action,
            apiVersion=apiVersion,
            count=count,
            eventTime=eventTime,
            firstTimestamp=firstTimestamp,
            kind=kind,
            lastTimestamp=lastTimestamp,
            message=message,
            reason=reason,
            related=related,
            reportingComponent=reportingComponent,
            reportingInstance=reportingInstance,
            series=series,
            source=source,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.event_series import EventSeries
from argo_workflows.model.event_source import EventSource
from argo_workflows.model.object_meta import ObjectMeta
from argo_workflows.model.object_reference import ObjectReference
