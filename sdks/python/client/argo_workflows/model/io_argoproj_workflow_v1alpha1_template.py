# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class IoArgoprojWorkflowV1alpha1Template(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Template is a reusable and composable unit of execution in a workflow
    """
    activeDeadlineSeconds = StrSchema

    @classmethod
    @property
    def affinity(cls) -> typing.Type['Affinity']:
        return Affinity

    @classmethod
    @property
    def archiveLocation(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1ArtifactLocation']:
        return IoArgoprojWorkflowV1alpha1ArtifactLocation
    automountServiceAccountToken = BoolSchema

    @classmethod
    @property
    def container(cls) -> typing.Type['Container']:
        return Container

    @classmethod
    @property
    def containerSet(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1ContainerSetTemplate']:
        return IoArgoprojWorkflowV1alpha1ContainerSetTemplate
    daemon = BoolSchema

    @classmethod
    @property
    def dag(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1DAGTemplate']:
        return IoArgoprojWorkflowV1alpha1DAGTemplate

    @classmethod
    @property
    def data(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Data']:
        return IoArgoprojWorkflowV1alpha1Data

    @classmethod
    @property
    def executor(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1ExecutorConfig']:
        return IoArgoprojWorkflowV1alpha1ExecutorConfig
    failFast = BoolSchema
    
    
    class hostAliases(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['HostAlias']:
            return HostAlias

    @classmethod
    @property
    def http(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1HTTP']:
        return IoArgoprojWorkflowV1alpha1HTTP
    
    
    class initContainers(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1UserContainer']:
            return IoArgoprojWorkflowV1alpha1UserContainer

    @classmethod
    @property
    def inputs(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Inputs']:
        return IoArgoprojWorkflowV1alpha1Inputs

    @classmethod
    @property
    def memoize(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Memoize']:
        return IoArgoprojWorkflowV1alpha1Memoize

    @classmethod
    @property
    def metadata(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Metadata']:
        return IoArgoprojWorkflowV1alpha1Metadata

    @classmethod
    @property
    def metrics(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Metrics']:
        return IoArgoprojWorkflowV1alpha1Metrics
    name = StrSchema
    
    
    class nodeSelector(
        DictSchema
    ):
        _additional_properties = StrSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'nodeSelector':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )

    @classmethod
    @property
    def outputs(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Outputs']:
        return IoArgoprojWorkflowV1alpha1Outputs
    parallelism = IntSchema
    plugin = DictSchema
    podSpecPatch = StrSchema
    priority = IntSchema
    priorityClassName = StrSchema

    @classmethod
    @property
    def resource(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1ResourceTemplate']:
        return IoArgoprojWorkflowV1alpha1ResourceTemplate

    @classmethod
    @property
    def retryStrategy(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1RetryStrategy']:
        return IoArgoprojWorkflowV1alpha1RetryStrategy
    schedulerName = StrSchema

    @classmethod
    @property
    def script(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1ScriptTemplate']:
        return IoArgoprojWorkflowV1alpha1ScriptTemplate

    @classmethod
    @property
    def securityContext(cls) -> typing.Type['PodSecurityContext']:
        return PodSecurityContext
    serviceAccountName = StrSchema
    
    
    class sidecars(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1UserContainer']:
            return IoArgoprojWorkflowV1alpha1UserContainer
    
    
    class steps(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1ParallelSteps']:
            return IoArgoprojWorkflowV1alpha1ParallelSteps

    @classmethod
    @property
    def suspend(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1SuspendTemplate']:
        return IoArgoprojWorkflowV1alpha1SuspendTemplate

    @classmethod
    @property
    def synchronization(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Synchronization']:
        return IoArgoprojWorkflowV1alpha1Synchronization
    timeout = StrSchema
    
    
    class tolerations(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['Toleration']:
            return Toleration
    
    
    class volumes(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['Volume']:
            return Volume


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        activeDeadlineSeconds: typing.Union[activeDeadlineSeconds, Unset] = unset,
        affinity: typing.Union['Affinity', Unset] = unset,
        archiveLocation: typing.Union['IoArgoprojWorkflowV1alpha1ArtifactLocation', Unset] = unset,
        automountServiceAccountToken: typing.Union[automountServiceAccountToken, Unset] = unset,
        container: typing.Union['Container', Unset] = unset,
        containerSet: typing.Union['IoArgoprojWorkflowV1alpha1ContainerSetTemplate', Unset] = unset,
        daemon: typing.Union[daemon, Unset] = unset,
        dag: typing.Union['IoArgoprojWorkflowV1alpha1DAGTemplate', Unset] = unset,
        data: typing.Union['IoArgoprojWorkflowV1alpha1Data', Unset] = unset,
        executor: typing.Union['IoArgoprojWorkflowV1alpha1ExecutorConfig', Unset] = unset,
        failFast: typing.Union[failFast, Unset] = unset,
        hostAliases: typing.Union[hostAliases, Unset] = unset,
        http: typing.Union['IoArgoprojWorkflowV1alpha1HTTP', Unset] = unset,
        initContainers: typing.Union[initContainers, Unset] = unset,
        inputs: typing.Union['IoArgoprojWorkflowV1alpha1Inputs', Unset] = unset,
        memoize: typing.Union['IoArgoprojWorkflowV1alpha1Memoize', Unset] = unset,
        metadata: typing.Union['IoArgoprojWorkflowV1alpha1Metadata', Unset] = unset,
        metrics: typing.Union['IoArgoprojWorkflowV1alpha1Metrics', Unset] = unset,
        name: typing.Union[name, Unset] = unset,
        nodeSelector: typing.Union[nodeSelector, Unset] = unset,
        outputs: typing.Union['IoArgoprojWorkflowV1alpha1Outputs', Unset] = unset,
        parallelism: typing.Union[parallelism, Unset] = unset,
        plugin: typing.Union[plugin, Unset] = unset,
        podSpecPatch: typing.Union[podSpecPatch, Unset] = unset,
        priority: typing.Union[priority, Unset] = unset,
        priorityClassName: typing.Union[priorityClassName, Unset] = unset,
        resource: typing.Union['IoArgoprojWorkflowV1alpha1ResourceTemplate', Unset] = unset,
        retryStrategy: typing.Union['IoArgoprojWorkflowV1alpha1RetryStrategy', Unset] = unset,
        schedulerName: typing.Union[schedulerName, Unset] = unset,
        script: typing.Union['IoArgoprojWorkflowV1alpha1ScriptTemplate', Unset] = unset,
        securityContext: typing.Union['PodSecurityContext', Unset] = unset,
        serviceAccountName: typing.Union[serviceAccountName, Unset] = unset,
        sidecars: typing.Union[sidecars, Unset] = unset,
        steps: typing.Union[steps, Unset] = unset,
        suspend: typing.Union['IoArgoprojWorkflowV1alpha1SuspendTemplate', Unset] = unset,
        synchronization: typing.Union['IoArgoprojWorkflowV1alpha1Synchronization', Unset] = unset,
        timeout: typing.Union[timeout, Unset] = unset,
        tolerations: typing.Union[tolerations, Unset] = unset,
        volumes: typing.Union[volumes, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'IoArgoprojWorkflowV1alpha1Template':
        return super().__new__(
            cls,
            *args,
            activeDeadlineSeconds=activeDeadlineSeconds,
            affinity=affinity,
            archiveLocation=archiveLocation,
            automountServiceAccountToken=automountServiceAccountToken,
            container=container,
            containerSet=containerSet,
            daemon=daemon,
            dag=dag,
            data=data,
            executor=executor,
            failFast=failFast,
            hostAliases=hostAliases,
            http=http,
            initContainers=initContainers,
            inputs=inputs,
            memoize=memoize,
            metadata=metadata,
            metrics=metrics,
            name=name,
            nodeSelector=nodeSelector,
            outputs=outputs,
            parallelism=parallelism,
            plugin=plugin,
            podSpecPatch=podSpecPatch,
            priority=priority,
            priorityClassName=priorityClassName,
            resource=resource,
            retryStrategy=retryStrategy,
            schedulerName=schedulerName,
            script=script,
            securityContext=securityContext,
            serviceAccountName=serviceAccountName,
            sidecars=sidecars,
            steps=steps,
            suspend=suspend,
            synchronization=synchronization,
            timeout=timeout,
            tolerations=tolerations,
            volumes=volumes,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.affinity import Affinity
from argo_workflows.model.container import Container
from argo_workflows.model.host_alias import HostAlias
from argo_workflows.model.io_argoproj_workflow_v1alpha1_artifact_location import IoArgoprojWorkflowV1alpha1ArtifactLocation
from argo_workflows.model.io_argoproj_workflow_v1alpha1_container_set_template import IoArgoprojWorkflowV1alpha1ContainerSetTemplate
from argo_workflows.model.io_argoproj_workflow_v1alpha1_dag_template import IoArgoprojWorkflowV1alpha1DAGTemplate
from argo_workflows.model.io_argoproj_workflow_v1alpha1_data import IoArgoprojWorkflowV1alpha1Data
from argo_workflows.model.io_argoproj_workflow_v1alpha1_executor_config import IoArgoprojWorkflowV1alpha1ExecutorConfig
from argo_workflows.model.io_argoproj_workflow_v1alpha1_http import IoArgoprojWorkflowV1alpha1HTTP
from argo_workflows.model.io_argoproj_workflow_v1alpha1_inputs import IoArgoprojWorkflowV1alpha1Inputs
from argo_workflows.model.io_argoproj_workflow_v1alpha1_memoize import IoArgoprojWorkflowV1alpha1Memoize
from argo_workflows.model.io_argoproj_workflow_v1alpha1_metadata import IoArgoprojWorkflowV1alpha1Metadata
from argo_workflows.model.io_argoproj_workflow_v1alpha1_metrics import IoArgoprojWorkflowV1alpha1Metrics
from argo_workflows.model.io_argoproj_workflow_v1alpha1_outputs import IoArgoprojWorkflowV1alpha1Outputs
from argo_workflows.model.io_argoproj_workflow_v1alpha1_parallel_steps import IoArgoprojWorkflowV1alpha1ParallelSteps
from argo_workflows.model.io_argoproj_workflow_v1alpha1_resource_template import IoArgoprojWorkflowV1alpha1ResourceTemplate
from argo_workflows.model.io_argoproj_workflow_v1alpha1_retry_strategy import IoArgoprojWorkflowV1alpha1RetryStrategy
from argo_workflows.model.io_argoproj_workflow_v1alpha1_script_template import IoArgoprojWorkflowV1alpha1ScriptTemplate
from argo_workflows.model.io_argoproj_workflow_v1alpha1_suspend_template import IoArgoprojWorkflowV1alpha1SuspendTemplate
from argo_workflows.model.io_argoproj_workflow_v1alpha1_synchronization import IoArgoprojWorkflowV1alpha1Synchronization
from argo_workflows.model.io_argoproj_workflow_v1alpha1_user_container import IoArgoprojWorkflowV1alpha1UserContainer
from argo_workflows.model.pod_security_context import PodSecurityContext
from argo_workflows.model.toleration import Toleration
from argo_workflows.model.volume import Volume
