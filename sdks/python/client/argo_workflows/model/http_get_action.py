# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class HTTPGetAction(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    HTTPGetAction describes an action based on HTTP Get requests.
    """
    _required_property_names = set((
        'port',
    ))
    host = StrSchema
    
    
    class httpHeaders(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['HTTPHeader']:
            return HTTPHeader
    path = StrSchema
    port = StrSchema
    
    
    class scheme(
        _SchemaEnumMaker(
            enum_value_to_name={
                "HTTP": "HTTP",
                "HTTPS": "HTTPS",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def HTTP(cls):
            return cls("HTTP")
        
        @classmethod
        @property
        def HTTPS(cls):
            return cls("HTTPS")


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        port: port,
        host: typing.Union[host, Unset] = unset,
        httpHeaders: typing.Union[httpHeaders, Unset] = unset,
        path: typing.Union[path, Unset] = unset,
        scheme: typing.Union[scheme, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'HTTPGetAction':
        return super().__new__(
            cls,
            *args,
            port=port,
            host=host,
            httpHeaders=httpHeaders,
            path=path,
            scheme=scheme,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.http_header import HTTPHeader
