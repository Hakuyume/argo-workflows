# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class ServicePort(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ServicePort contains information on service's port.
    """
    _required_property_names = set((
        'port',
    ))
    appProtocol = StrSchema
    name = StrSchema
    nodePort = IntSchema
    port = IntSchema
    
    
    class protocol(
        _SchemaEnumMaker(
            enum_value_to_name={
                "SCTP": "SCTP",
                "TCP": "TCP",
                "UDP": "UDP",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def SCTP(cls):
            return cls("SCTP")
        
        @classmethod
        @property
        def TCP(cls):
            return cls("TCP")
        
        @classmethod
        @property
        def UDP(cls):
            return cls("UDP")
    targetPort = StrSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        port: port,
        appProtocol: typing.Union[appProtocol, Unset] = unset,
        name: typing.Union[name, Unset] = unset,
        nodePort: typing.Union[nodePort, Unset] = unset,
        protocol: typing.Union[protocol, Unset] = unset,
        targetPort: typing.Union[targetPort, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'ServicePort':
        return super().__new__(
            cls,
            *args,
            port=port,
            appProtocol=appProtocol,
            name=name,
            nodePort=nodePort,
            protocol=protocol,
            targetPort=targetPort,
            _configuration=_configuration,
            **kwargs,
        )
