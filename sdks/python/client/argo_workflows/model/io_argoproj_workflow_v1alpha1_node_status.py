# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class IoArgoprojWorkflowV1alpha1NodeStatus(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    NodeStatus contains status information about an individual node in the workflow
    """
    _required_property_names = set((
        'id',
        'name',
        'type',
    ))
    boundaryID = StrSchema
    
    
    class children(
        ListSchema
    ):
        _items = StrSchema
    daemoned = BoolSchema
    displayName = StrSchema
    estimatedDuration = IntSchema
    finishedAt = DateTimeSchema
    hostNodeName = StrSchema
    id = StrSchema

    @classmethod
    @property
    def inputs(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Inputs']:
        return IoArgoprojWorkflowV1alpha1Inputs

    @classmethod
    @property
    def memoizationStatus(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1MemoizationStatus']:
        return IoArgoprojWorkflowV1alpha1MemoizationStatus
    message = StrSchema
    name = StrSchema
    
    
    class outboundNodes(
        ListSchema
    ):
        _items = StrSchema

    @classmethod
    @property
    def outputs(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Outputs']:
        return IoArgoprojWorkflowV1alpha1Outputs
    phase = StrSchema
    podIP = StrSchema
    progress = StrSchema
    
    
    class resourcesDuration(
        DictSchema
    ):
        _additional_properties = Int64Schema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'resourcesDuration':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    startedAt = DateTimeSchema

    @classmethod
    @property
    def synchronizationStatus(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus']:
        return IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus
    templateName = StrSchema

    @classmethod
    @property
    def templateRef(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1TemplateRef']:
        return IoArgoprojWorkflowV1alpha1TemplateRef
    templateScope = StrSchema
    type = StrSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        id: id,
        name: name,
        type: type,
        boundaryID: typing.Union[boundaryID, Unset] = unset,
        children: typing.Union[children, Unset] = unset,
        daemoned: typing.Union[daemoned, Unset] = unset,
        displayName: typing.Union[displayName, Unset] = unset,
        estimatedDuration: typing.Union[estimatedDuration, Unset] = unset,
        finishedAt: typing.Union[finishedAt, Unset] = unset,
        hostNodeName: typing.Union[hostNodeName, Unset] = unset,
        inputs: typing.Union['IoArgoprojWorkflowV1alpha1Inputs', Unset] = unset,
        memoizationStatus: typing.Union['IoArgoprojWorkflowV1alpha1MemoizationStatus', Unset] = unset,
        message: typing.Union[message, Unset] = unset,
        outboundNodes: typing.Union[outboundNodes, Unset] = unset,
        outputs: typing.Union['IoArgoprojWorkflowV1alpha1Outputs', Unset] = unset,
        phase: typing.Union[phase, Unset] = unset,
        podIP: typing.Union[podIP, Unset] = unset,
        progress: typing.Union[progress, Unset] = unset,
        resourcesDuration: typing.Union[resourcesDuration, Unset] = unset,
        startedAt: typing.Union[startedAt, Unset] = unset,
        synchronizationStatus: typing.Union['IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus', Unset] = unset,
        templateName: typing.Union[templateName, Unset] = unset,
        templateRef: typing.Union['IoArgoprojWorkflowV1alpha1TemplateRef', Unset] = unset,
        templateScope: typing.Union[templateScope, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'IoArgoprojWorkflowV1alpha1NodeStatus':
        return super().__new__(
            cls,
            *args,
            id=id,
            name=name,
            type=type,
            boundaryID=boundaryID,
            children=children,
            daemoned=daemoned,
            displayName=displayName,
            estimatedDuration=estimatedDuration,
            finishedAt=finishedAt,
            hostNodeName=hostNodeName,
            inputs=inputs,
            memoizationStatus=memoizationStatus,
            message=message,
            outboundNodes=outboundNodes,
            outputs=outputs,
            phase=phase,
            podIP=podIP,
            progress=progress,
            resourcesDuration=resourcesDuration,
            startedAt=startedAt,
            synchronizationStatus=synchronizationStatus,
            templateName=templateName,
            templateRef=templateRef,
            templateScope=templateScope,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.io_argoproj_workflow_v1alpha1_inputs import IoArgoprojWorkflowV1alpha1Inputs
from argo_workflows.model.io_argoproj_workflow_v1alpha1_memoization_status import IoArgoprojWorkflowV1alpha1MemoizationStatus
from argo_workflows.model.io_argoproj_workflow_v1alpha1_node_synchronization_status import IoArgoprojWorkflowV1alpha1NodeSynchronizationStatus
from argo_workflows.model.io_argoproj_workflow_v1alpha1_outputs import IoArgoprojWorkflowV1alpha1Outputs
from argo_workflows.model.io_argoproj_workflow_v1alpha1_template_ref import IoArgoprojWorkflowV1alpha1TemplateRef
