# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @classmethod
    @property
    def db(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSink']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSink
    deadLetterQueue = BoolSchema

    @classmethod
    @property
    def http(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSink']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSink

    @classmethod
    @property
    def jetstream(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1JetStreamSink']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1JetStreamSink

    @classmethod
    @property
    def kafka(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink

    @classmethod
    @property
    def log(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Log']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Log
    name = StrSchema

    @classmethod
    @property
    def s3(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Sink']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Sink

    @classmethod
    @property
    def stan(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN

    @classmethod
    @property
    def volume(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSink']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSink


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        db: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSink', Unset] = unset,
        deadLetterQueue: typing.Union[deadLetterQueue, Unset] = unset,
        http: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSink', Unset] = unset,
        jetstream: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1JetStreamSink', Unset] = unset,
        kafka: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink', Unset] = unset,
        log: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Log', Unset] = unset,
        name: typing.Union[name, Unset] = unset,
        s3: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Sink', Unset] = unset,
        stan: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN', Unset] = unset,
        volume: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSink', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink':
        return super().__new__(
            cls,
            *args,
            db=db,
            deadLetterQueue=deadLetterQueue,
            http=http,
            jetstream=jetstream,
            kafka=kafka,
            log=log,
            name=name,
            s3=s3,
            stan=stan,
            volume=volume,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_db_sink import GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSink
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_http_sink import GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSink
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_jet_stream_sink import GithubComArgoprojLabsArgoDataflowApiV1alpha1JetStreamSink
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_kafka_sink import GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_log import GithubComArgoprojLabsArgoDataflowApiV1alpha1Log
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_s3_sink import GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Sink
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_stan import GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_volume_sink import GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSink
