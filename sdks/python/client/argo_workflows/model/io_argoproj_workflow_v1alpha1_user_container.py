# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class IoArgoprojWorkflowV1alpha1UserContainer(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    UserContainer is a container specified by a user.
    """
    _required_property_names = set((
        'name',
    ))
    
    
    class args(
        ListSchema
    ):
        _items = StrSchema
    
    
    class command(
        ListSchema
    ):
        _items = StrSchema
    
    
    class env(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['EnvVar']:
            return EnvVar
    
    
    class envFrom(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['EnvFromSource']:
            return EnvFromSource
    image = StrSchema
    imagePullPolicy = StrSchema

    @classmethod
    @property
    def lifecycle(cls) -> typing.Type['Lifecycle']:
        return Lifecycle

    @classmethod
    @property
    def livenessProbe(cls) -> typing.Type['Probe']:
        return Probe
    mirrorVolumeMounts = BoolSchema
    name = StrSchema
    
    
    class ports(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['ContainerPort']:
            return ContainerPort

    @classmethod
    @property
    def readinessProbe(cls) -> typing.Type['Probe']:
        return Probe

    @classmethod
    @property
    def resources(cls) -> typing.Type['ResourceRequirements']:
        return ResourceRequirements

    @classmethod
    @property
    def securityContext(cls) -> typing.Type['SecurityContext']:
        return SecurityContext

    @classmethod
    @property
    def startupProbe(cls) -> typing.Type['Probe']:
        return Probe
    stdin = BoolSchema
    stdinOnce = BoolSchema
    terminationMessagePath = StrSchema
    terminationMessagePolicy = StrSchema
    tty = BoolSchema
    
    
    class volumeDevices(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['VolumeDevice']:
            return VolumeDevice
    
    
    class volumeMounts(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['VolumeMount']:
            return VolumeMount
    workingDir = StrSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        name: name,
        args: typing.Union[args, Unset] = unset,
        command: typing.Union[command, Unset] = unset,
        env: typing.Union[env, Unset] = unset,
        envFrom: typing.Union[envFrom, Unset] = unset,
        image: typing.Union[image, Unset] = unset,
        imagePullPolicy: typing.Union[imagePullPolicy, Unset] = unset,
        lifecycle: typing.Union['Lifecycle', Unset] = unset,
        livenessProbe: typing.Union['Probe', Unset] = unset,
        mirrorVolumeMounts: typing.Union[mirrorVolumeMounts, Unset] = unset,
        ports: typing.Union[ports, Unset] = unset,
        readinessProbe: typing.Union['Probe', Unset] = unset,
        resources: typing.Union['ResourceRequirements', Unset] = unset,
        securityContext: typing.Union['SecurityContext', Unset] = unset,
        startupProbe: typing.Union['Probe', Unset] = unset,
        stdin: typing.Union[stdin, Unset] = unset,
        stdinOnce: typing.Union[stdinOnce, Unset] = unset,
        terminationMessagePath: typing.Union[terminationMessagePath, Unset] = unset,
        terminationMessagePolicy: typing.Union[terminationMessagePolicy, Unset] = unset,
        tty: typing.Union[tty, Unset] = unset,
        volumeDevices: typing.Union[volumeDevices, Unset] = unset,
        volumeMounts: typing.Union[volumeMounts, Unset] = unset,
        workingDir: typing.Union[workingDir, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'IoArgoprojWorkflowV1alpha1UserContainer':
        return super().__new__(
            cls,
            *args,
            name=name,
            args=args,
            command=command,
            env=env,
            envFrom=envFrom,
            image=image,
            imagePullPolicy=imagePullPolicy,
            lifecycle=lifecycle,
            livenessProbe=livenessProbe,
            mirrorVolumeMounts=mirrorVolumeMounts,
            ports=ports,
            readinessProbe=readinessProbe,
            resources=resources,
            securityContext=securityContext,
            startupProbe=startupProbe,
            stdin=stdin,
            stdinOnce=stdinOnce,
            terminationMessagePath=terminationMessagePath,
            terminationMessagePolicy=terminationMessagePolicy,
            tty=tty,
            volumeDevices=volumeDevices,
            volumeMounts=volumeMounts,
            workingDir=workingDir,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.container_port import ContainerPort
from argo_workflows.model.env_from_source import EnvFromSource
from argo_workflows.model.env_var import EnvVar
from argo_workflows.model.lifecycle import Lifecycle
from argo_workflows.model.probe import Probe
from argo_workflows.model.resource_requirements import ResourceRequirements
from argo_workflows.model.security_context import SecurityContext
from argo_workflows.model.volume_device import VolumeDevice
from argo_workflows.model.volume_mount import VolumeMount
