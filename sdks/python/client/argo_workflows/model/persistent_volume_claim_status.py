# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class PersistentVolumeClaimStatus(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PersistentVolumeClaimStatus is the current status of a persistent volume claim.
    """
    
    
    class accessModes(
        ListSchema
    ):
        _items = StrSchema
    
    
    class allocatedResources(
        DictSchema
    ):
        _additional_properties = StrSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'allocatedResources':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class capacity(
        DictSchema
    ):
        _additional_properties = StrSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'capacity':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class conditions(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['PersistentVolumeClaimCondition']:
            return PersistentVolumeClaimCondition
    
    
    class phase(
        _SchemaEnumMaker(
            enum_value_to_name={
                "Bound": "BOUND",
                "Lost": "LOST",
                "Pending": "PENDING",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def BOUND(cls):
            return cls("Bound")
        
        @classmethod
        @property
        def LOST(cls):
            return cls("Lost")
        
        @classmethod
        @property
        def PENDING(cls):
            return cls("Pending")
    resizeStatus = StrSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        accessModes: typing.Union[accessModes, Unset] = unset,
        allocatedResources: typing.Union[allocatedResources, Unset] = unset,
        capacity: typing.Union[capacity, Unset] = unset,
        conditions: typing.Union[conditions, Unset] = unset,
        phase: typing.Union[phase, Unset] = unset,
        resizeStatus: typing.Union[resizeStatus, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'PersistentVolumeClaimStatus':
        return super().__new__(
            cls,
            *args,
            accessModes=accessModes,
            allocatedResources=allocatedResources,
            capacity=capacity,
            conditions=conditions,
            phase=phase,
            resizeStatus=resizeStatus,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.persistent_volume_claim_condition import PersistentVolumeClaimCondition
