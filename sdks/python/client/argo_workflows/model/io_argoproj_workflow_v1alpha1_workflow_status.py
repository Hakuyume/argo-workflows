# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class IoArgoprojWorkflowV1alpha1WorkflowStatus(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    WorkflowStatus contains overall status information about a workflow
    """

    @classmethod
    @property
    def artifactRepositoryRef(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus']:
        return IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus
    compressedNodes = StrSchema
    
    
    class conditions(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Condition']:
            return IoArgoprojWorkflowV1alpha1Condition
    estimatedDuration = IntSchema
    finishedAt = DateTimeSchema
    message = StrSchema
    
    
    class nodes(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1NodeStatus']:
            return IoArgoprojWorkflowV1alpha1NodeStatus
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'nodes':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    offloadNodeStatusVersion = StrSchema

    @classmethod
    @property
    def outputs(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Outputs']:
        return IoArgoprojWorkflowV1alpha1Outputs
    
    
    class persistentVolumeClaims(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['Volume']:
            return Volume
    phase = StrSchema
    progress = StrSchema
    
    
    class resourcesDuration(
        DictSchema
    ):
        _additional_properties = Int64Schema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'resourcesDuration':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    startedAt = DateTimeSchema
    
    
    class storedTemplates(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Template']:
            return IoArgoprojWorkflowV1alpha1Template
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'storedTemplates':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )

    @classmethod
    @property
    def storedWorkflowTemplateSpec(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1WorkflowSpec']:
        return IoArgoprojWorkflowV1alpha1WorkflowSpec

    @classmethod
    @property
    def synchronization(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1SynchronizationStatus']:
        return IoArgoprojWorkflowV1alpha1SynchronizationStatus


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        artifactRepositoryRef: typing.Union['IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus', Unset] = unset,
        compressedNodes: typing.Union[compressedNodes, Unset] = unset,
        conditions: typing.Union[conditions, Unset] = unset,
        estimatedDuration: typing.Union[estimatedDuration, Unset] = unset,
        finishedAt: typing.Union[finishedAt, Unset] = unset,
        message: typing.Union[message, Unset] = unset,
        nodes: typing.Union[nodes, Unset] = unset,
        offloadNodeStatusVersion: typing.Union[offloadNodeStatusVersion, Unset] = unset,
        outputs: typing.Union['IoArgoprojWorkflowV1alpha1Outputs', Unset] = unset,
        persistentVolumeClaims: typing.Union[persistentVolumeClaims, Unset] = unset,
        phase: typing.Union[phase, Unset] = unset,
        progress: typing.Union[progress, Unset] = unset,
        resourcesDuration: typing.Union[resourcesDuration, Unset] = unset,
        startedAt: typing.Union[startedAt, Unset] = unset,
        storedTemplates: typing.Union[storedTemplates, Unset] = unset,
        storedWorkflowTemplateSpec: typing.Union['IoArgoprojWorkflowV1alpha1WorkflowSpec', Unset] = unset,
        synchronization: typing.Union['IoArgoprojWorkflowV1alpha1SynchronizationStatus', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'IoArgoprojWorkflowV1alpha1WorkflowStatus':
        return super().__new__(
            cls,
            *args,
            artifactRepositoryRef=artifactRepositoryRef,
            compressedNodes=compressedNodes,
            conditions=conditions,
            estimatedDuration=estimatedDuration,
            finishedAt=finishedAt,
            message=message,
            nodes=nodes,
            offloadNodeStatusVersion=offloadNodeStatusVersion,
            outputs=outputs,
            persistentVolumeClaims=persistentVolumeClaims,
            phase=phase,
            progress=progress,
            resourcesDuration=resourcesDuration,
            startedAt=startedAt,
            storedTemplates=storedTemplates,
            storedWorkflowTemplateSpec=storedWorkflowTemplateSpec,
            synchronization=synchronization,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.io_argoproj_workflow_v1alpha1_artifact_repository_ref_status import IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus
from argo_workflows.model.io_argoproj_workflow_v1alpha1_condition import IoArgoprojWorkflowV1alpha1Condition
from argo_workflows.model.io_argoproj_workflow_v1alpha1_node_status import IoArgoprojWorkflowV1alpha1NodeStatus
from argo_workflows.model.io_argoproj_workflow_v1alpha1_outputs import IoArgoprojWorkflowV1alpha1Outputs
from argo_workflows.model.io_argoproj_workflow_v1alpha1_synchronization_status import IoArgoprojWorkflowV1alpha1SynchronizationStatus
from argo_workflows.model.io_argoproj_workflow_v1alpha1_template import IoArgoprojWorkflowV1alpha1Template
from argo_workflows.model.io_argoproj_workflow_v1alpha1_workflow_spec import IoArgoprojWorkflowV1alpha1WorkflowSpec
from argo_workflows.model.volume import Volume
