# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class IoArgoprojEventsV1alpha1TriggerTemplate(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    TriggerTemplate is the template that describes trigger specification.
    """

    @classmethod
    @property
    def argoWorkflow(cls) -> typing.Type['IoArgoprojEventsV1alpha1ArgoWorkflowTrigger']:
        return IoArgoprojEventsV1alpha1ArgoWorkflowTrigger

    @classmethod
    @property
    def awsLambda(cls) -> typing.Type['IoArgoprojEventsV1alpha1AWSLambdaTrigger']:
        return IoArgoprojEventsV1alpha1AWSLambdaTrigger

    @classmethod
    @property
    def azureEventHubs(cls) -> typing.Type['IoArgoprojEventsV1alpha1AzureEventHubsTrigger']:
        return IoArgoprojEventsV1alpha1AzureEventHubsTrigger
    conditions = StrSchema
    
    
    class conditionsReset(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['IoArgoprojEventsV1alpha1ConditionsResetCriteria']:
            return IoArgoprojEventsV1alpha1ConditionsResetCriteria

    @classmethod
    @property
    def custom(cls) -> typing.Type['IoArgoprojEventsV1alpha1CustomTrigger']:
        return IoArgoprojEventsV1alpha1CustomTrigger

    @classmethod
    @property
    def http(cls) -> typing.Type['IoArgoprojEventsV1alpha1HTTPTrigger']:
        return IoArgoprojEventsV1alpha1HTTPTrigger

    @classmethod
    @property
    def k8s(cls) -> typing.Type['IoArgoprojEventsV1alpha1StandardK8STrigger']:
        return IoArgoprojEventsV1alpha1StandardK8STrigger

    @classmethod
    @property
    def kafka(cls) -> typing.Type['IoArgoprojEventsV1alpha1KafkaTrigger']:
        return IoArgoprojEventsV1alpha1KafkaTrigger

    @classmethod
    @property
    def log(cls) -> typing.Type['IoArgoprojEventsV1alpha1LogTrigger']:
        return IoArgoprojEventsV1alpha1LogTrigger
    name = StrSchema

    @classmethod
    @property
    def nats(cls) -> typing.Type['IoArgoprojEventsV1alpha1NATSTrigger']:
        return IoArgoprojEventsV1alpha1NATSTrigger

    @classmethod
    @property
    def openWhisk(cls) -> typing.Type['IoArgoprojEventsV1alpha1OpenWhiskTrigger']:
        return IoArgoprojEventsV1alpha1OpenWhiskTrigger

    @classmethod
    @property
    def pulsar(cls) -> typing.Type['IoArgoprojEventsV1alpha1PulsarTrigger']:
        return IoArgoprojEventsV1alpha1PulsarTrigger

    @classmethod
    @property
    def slack(cls) -> typing.Type['IoArgoprojEventsV1alpha1SlackTrigger']:
        return IoArgoprojEventsV1alpha1SlackTrigger


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        argoWorkflow: typing.Union['IoArgoprojEventsV1alpha1ArgoWorkflowTrigger', Unset] = unset,
        awsLambda: typing.Union['IoArgoprojEventsV1alpha1AWSLambdaTrigger', Unset] = unset,
        azureEventHubs: typing.Union['IoArgoprojEventsV1alpha1AzureEventHubsTrigger', Unset] = unset,
        conditions: typing.Union[conditions, Unset] = unset,
        conditionsReset: typing.Union[conditionsReset, Unset] = unset,
        custom: typing.Union['IoArgoprojEventsV1alpha1CustomTrigger', Unset] = unset,
        http: typing.Union['IoArgoprojEventsV1alpha1HTTPTrigger', Unset] = unset,
        k8s: typing.Union['IoArgoprojEventsV1alpha1StandardK8STrigger', Unset] = unset,
        kafka: typing.Union['IoArgoprojEventsV1alpha1KafkaTrigger', Unset] = unset,
        log: typing.Union['IoArgoprojEventsV1alpha1LogTrigger', Unset] = unset,
        name: typing.Union[name, Unset] = unset,
        nats: typing.Union['IoArgoprojEventsV1alpha1NATSTrigger', Unset] = unset,
        openWhisk: typing.Union['IoArgoprojEventsV1alpha1OpenWhiskTrigger', Unset] = unset,
        pulsar: typing.Union['IoArgoprojEventsV1alpha1PulsarTrigger', Unset] = unset,
        slack: typing.Union['IoArgoprojEventsV1alpha1SlackTrigger', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'IoArgoprojEventsV1alpha1TriggerTemplate':
        return super().__new__(
            cls,
            *args,
            argoWorkflow=argoWorkflow,
            awsLambda=awsLambda,
            azureEventHubs=azureEventHubs,
            conditions=conditions,
            conditionsReset=conditionsReset,
            custom=custom,
            http=http,
            k8s=k8s,
            kafka=kafka,
            log=log,
            name=name,
            nats=nats,
            openWhisk=openWhisk,
            pulsar=pulsar,
            slack=slack,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.io_argoproj_events_v1alpha1_argo_workflow_trigger import IoArgoprojEventsV1alpha1ArgoWorkflowTrigger
from argo_workflows.model.io_argoproj_events_v1alpha1_aws_lambda_trigger import IoArgoprojEventsV1alpha1AWSLambdaTrigger
from argo_workflows.model.io_argoproj_events_v1alpha1_azure_event_hubs_trigger import IoArgoprojEventsV1alpha1AzureEventHubsTrigger
from argo_workflows.model.io_argoproj_events_v1alpha1_conditions_reset_criteria import IoArgoprojEventsV1alpha1ConditionsResetCriteria
from argo_workflows.model.io_argoproj_events_v1alpha1_custom_trigger import IoArgoprojEventsV1alpha1CustomTrigger
from argo_workflows.model.io_argoproj_events_v1alpha1_http_trigger import IoArgoprojEventsV1alpha1HTTPTrigger
from argo_workflows.model.io_argoproj_events_v1alpha1_kafka_trigger import IoArgoprojEventsV1alpha1KafkaTrigger
from argo_workflows.model.io_argoproj_events_v1alpha1_log_trigger import IoArgoprojEventsV1alpha1LogTrigger
from argo_workflows.model.io_argoproj_events_v1alpha1_nats_trigger import IoArgoprojEventsV1alpha1NATSTrigger
from argo_workflows.model.io_argoproj_events_v1alpha1_open_whisk_trigger import IoArgoprojEventsV1alpha1OpenWhiskTrigger
from argo_workflows.model.io_argoproj_events_v1alpha1_pulsar_trigger import IoArgoprojEventsV1alpha1PulsarTrigger
from argo_workflows.model.io_argoproj_events_v1alpha1_slack_trigger import IoArgoprojEventsV1alpha1SlackTrigger
from argo_workflows.model.io_argoproj_events_v1alpha1_standard_k8_s_trigger import IoArgoprojEventsV1alpha1StandardK8STrigger
