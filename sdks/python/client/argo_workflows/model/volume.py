# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class Volume(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Volume represents a named volume in a pod that may be accessed by any container in the pod.
    """
    _required_property_names = set((
        'name',
    ))

    @classmethod
    @property
    def awsElasticBlockStore(cls) -> typing.Type['AWSElasticBlockStoreVolumeSource']:
        return AWSElasticBlockStoreVolumeSource

    @classmethod
    @property
    def azureDisk(cls) -> typing.Type['AzureDiskVolumeSource']:
        return AzureDiskVolumeSource

    @classmethod
    @property
    def azureFile(cls) -> typing.Type['AzureFileVolumeSource']:
        return AzureFileVolumeSource

    @classmethod
    @property
    def cephfs(cls) -> typing.Type['CephFSVolumeSource']:
        return CephFSVolumeSource

    @classmethod
    @property
    def cinder(cls) -> typing.Type['CinderVolumeSource']:
        return CinderVolumeSource

    @classmethod
    @property
    def configMap(cls) -> typing.Type['ConfigMapVolumeSource']:
        return ConfigMapVolumeSource

    @classmethod
    @property
    def csi(cls) -> typing.Type['CSIVolumeSource']:
        return CSIVolumeSource

    @classmethod
    @property
    def downwardAPI(cls) -> typing.Type['DownwardAPIVolumeSource']:
        return DownwardAPIVolumeSource

    @classmethod
    @property
    def emptyDir(cls) -> typing.Type['EmptyDirVolumeSource']:
        return EmptyDirVolumeSource

    @classmethod
    @property
    def ephemeral(cls) -> typing.Type['EphemeralVolumeSource']:
        return EphemeralVolumeSource

    @classmethod
    @property
    def fc(cls) -> typing.Type['FCVolumeSource']:
        return FCVolumeSource

    @classmethod
    @property
    def flexVolume(cls) -> typing.Type['FlexVolumeSource']:
        return FlexVolumeSource

    @classmethod
    @property
    def flocker(cls) -> typing.Type['FlockerVolumeSource']:
        return FlockerVolumeSource

    @classmethod
    @property
    def gcePersistentDisk(cls) -> typing.Type['GCEPersistentDiskVolumeSource']:
        return GCEPersistentDiskVolumeSource

    @classmethod
    @property
    def gitRepo(cls) -> typing.Type['GitRepoVolumeSource']:
        return GitRepoVolumeSource

    @classmethod
    @property
    def glusterfs(cls) -> typing.Type['GlusterfsVolumeSource']:
        return GlusterfsVolumeSource

    @classmethod
    @property
    def hostPath(cls) -> typing.Type['HostPathVolumeSource']:
        return HostPathVolumeSource

    @classmethod
    @property
    def iscsi(cls) -> typing.Type['ISCSIVolumeSource']:
        return ISCSIVolumeSource
    name = StrSchema

    @classmethod
    @property
    def nfs(cls) -> typing.Type['NFSVolumeSource']:
        return NFSVolumeSource

    @classmethod
    @property
    def persistentVolumeClaim(cls) -> typing.Type['PersistentVolumeClaimVolumeSource']:
        return PersistentVolumeClaimVolumeSource

    @classmethod
    @property
    def photonPersistentDisk(cls) -> typing.Type['PhotonPersistentDiskVolumeSource']:
        return PhotonPersistentDiskVolumeSource

    @classmethod
    @property
    def portworxVolume(cls) -> typing.Type['PortworxVolumeSource']:
        return PortworxVolumeSource

    @classmethod
    @property
    def projected(cls) -> typing.Type['ProjectedVolumeSource']:
        return ProjectedVolumeSource

    @classmethod
    @property
    def quobyte(cls) -> typing.Type['QuobyteVolumeSource']:
        return QuobyteVolumeSource

    @classmethod
    @property
    def rbd(cls) -> typing.Type['RBDVolumeSource']:
        return RBDVolumeSource

    @classmethod
    @property
    def scaleIO(cls) -> typing.Type['ScaleIOVolumeSource']:
        return ScaleIOVolumeSource

    @classmethod
    @property
    def secret(cls) -> typing.Type['SecretVolumeSource']:
        return SecretVolumeSource

    @classmethod
    @property
    def storageos(cls) -> typing.Type['StorageOSVolumeSource']:
        return StorageOSVolumeSource

    @classmethod
    @property
    def vsphereVolume(cls) -> typing.Type['VsphereVirtualDiskVolumeSource']:
        return VsphereVirtualDiskVolumeSource


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        name: name,
        awsElasticBlockStore: typing.Union['AWSElasticBlockStoreVolumeSource', Unset] = unset,
        azureDisk: typing.Union['AzureDiskVolumeSource', Unset] = unset,
        azureFile: typing.Union['AzureFileVolumeSource', Unset] = unset,
        cephfs: typing.Union['CephFSVolumeSource', Unset] = unset,
        cinder: typing.Union['CinderVolumeSource', Unset] = unset,
        configMap: typing.Union['ConfigMapVolumeSource', Unset] = unset,
        csi: typing.Union['CSIVolumeSource', Unset] = unset,
        downwardAPI: typing.Union['DownwardAPIVolumeSource', Unset] = unset,
        emptyDir: typing.Union['EmptyDirVolumeSource', Unset] = unset,
        ephemeral: typing.Union['EphemeralVolumeSource', Unset] = unset,
        fc: typing.Union['FCVolumeSource', Unset] = unset,
        flexVolume: typing.Union['FlexVolumeSource', Unset] = unset,
        flocker: typing.Union['FlockerVolumeSource', Unset] = unset,
        gcePersistentDisk: typing.Union['GCEPersistentDiskVolumeSource', Unset] = unset,
        gitRepo: typing.Union['GitRepoVolumeSource', Unset] = unset,
        glusterfs: typing.Union['GlusterfsVolumeSource', Unset] = unset,
        hostPath: typing.Union['HostPathVolumeSource', Unset] = unset,
        iscsi: typing.Union['ISCSIVolumeSource', Unset] = unset,
        nfs: typing.Union['NFSVolumeSource', Unset] = unset,
        persistentVolumeClaim: typing.Union['PersistentVolumeClaimVolumeSource', Unset] = unset,
        photonPersistentDisk: typing.Union['PhotonPersistentDiskVolumeSource', Unset] = unset,
        portworxVolume: typing.Union['PortworxVolumeSource', Unset] = unset,
        projected: typing.Union['ProjectedVolumeSource', Unset] = unset,
        quobyte: typing.Union['QuobyteVolumeSource', Unset] = unset,
        rbd: typing.Union['RBDVolumeSource', Unset] = unset,
        scaleIO: typing.Union['ScaleIOVolumeSource', Unset] = unset,
        secret: typing.Union['SecretVolumeSource', Unset] = unset,
        storageos: typing.Union['StorageOSVolumeSource', Unset] = unset,
        vsphereVolume: typing.Union['VsphereVirtualDiskVolumeSource', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'Volume':
        return super().__new__(
            cls,
            *args,
            name=name,
            awsElasticBlockStore=awsElasticBlockStore,
            azureDisk=azureDisk,
            azureFile=azureFile,
            cephfs=cephfs,
            cinder=cinder,
            configMap=configMap,
            csi=csi,
            downwardAPI=downwardAPI,
            emptyDir=emptyDir,
            ephemeral=ephemeral,
            fc=fc,
            flexVolume=flexVolume,
            flocker=flocker,
            gcePersistentDisk=gcePersistentDisk,
            gitRepo=gitRepo,
            glusterfs=glusterfs,
            hostPath=hostPath,
            iscsi=iscsi,
            nfs=nfs,
            persistentVolumeClaim=persistentVolumeClaim,
            photonPersistentDisk=photonPersistentDisk,
            portworxVolume=portworxVolume,
            projected=projected,
            quobyte=quobyte,
            rbd=rbd,
            scaleIO=scaleIO,
            secret=secret,
            storageos=storageos,
            vsphereVolume=vsphereVolume,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.aws_elastic_block_store_volume_source import AWSElasticBlockStoreVolumeSource
from argo_workflows.model.azure_disk_volume_source import AzureDiskVolumeSource
from argo_workflows.model.azure_file_volume_source import AzureFileVolumeSource
from argo_workflows.model.ceph_fs_volume_source import CephFSVolumeSource
from argo_workflows.model.cinder_volume_source import CinderVolumeSource
from argo_workflows.model.config_map_volume_source import ConfigMapVolumeSource
from argo_workflows.model.csi_volume_source import CSIVolumeSource
from argo_workflows.model.downward_api_volume_source import DownwardAPIVolumeSource
from argo_workflows.model.empty_dir_volume_source import EmptyDirVolumeSource
from argo_workflows.model.ephemeral_volume_source import EphemeralVolumeSource
from argo_workflows.model.fc_volume_source import FCVolumeSource
from argo_workflows.model.flex_volume_source import FlexVolumeSource
from argo_workflows.model.flocker_volume_source import FlockerVolumeSource
from argo_workflows.model.gce_persistent_disk_volume_source import GCEPersistentDiskVolumeSource
from argo_workflows.model.git_repo_volume_source import GitRepoVolumeSource
from argo_workflows.model.glusterfs_volume_source import GlusterfsVolumeSource
from argo_workflows.model.host_path_volume_source import HostPathVolumeSource
from argo_workflows.model.iscsi_volume_source import ISCSIVolumeSource
from argo_workflows.model.nfs_volume_source import NFSVolumeSource
from argo_workflows.model.persistent_volume_claim_volume_source import PersistentVolumeClaimVolumeSource
from argo_workflows.model.photon_persistent_disk_volume_source import PhotonPersistentDiskVolumeSource
from argo_workflows.model.portworx_volume_source import PortworxVolumeSource
from argo_workflows.model.projected_volume_source import ProjectedVolumeSource
from argo_workflows.model.quobyte_volume_source import QuobyteVolumeSource
from argo_workflows.model.rbd_volume_source import RBDVolumeSource
from argo_workflows.model.scale_io_volume_source import ScaleIOVolumeSource
from argo_workflows.model.secret_volume_source import SecretVolumeSource
from argo_workflows.model.storage_os_volume_source import StorageOSVolumeSource
from argo_workflows.model.vsphere_virtual_disk_volume_source import VsphereVirtualDiskVolumeSource
