# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class IoArgoprojEventsV1alpha1Template(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @classmethod
    @property
    def affinity(cls) -> typing.Type['Affinity']:
        return Affinity

    @classmethod
    @property
    def container(cls) -> typing.Type['Container']:
        return Container
    
    
    class imagePullSecrets(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['LocalObjectReference']:
            return LocalObjectReference

    @classmethod
    @property
    def metadata(cls) -> typing.Type['IoArgoprojEventsV1alpha1Metadata']:
        return IoArgoprojEventsV1alpha1Metadata
    
    
    class nodeSelector(
        DictSchema
    ):
        _additional_properties = StrSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'nodeSelector':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    priority = IntSchema
    priorityClassName = StrSchema

    @classmethod
    @property
    def securityContext(cls) -> typing.Type['PodSecurityContext']:
        return PodSecurityContext
    serviceAccountName = StrSchema
    
    
    class tolerations(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['Toleration']:
            return Toleration
    
    
    class volumes(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['Volume']:
            return Volume


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        affinity: typing.Union['Affinity', Unset] = unset,
        container: typing.Union['Container', Unset] = unset,
        imagePullSecrets: typing.Union[imagePullSecrets, Unset] = unset,
        metadata: typing.Union['IoArgoprojEventsV1alpha1Metadata', Unset] = unset,
        nodeSelector: typing.Union[nodeSelector, Unset] = unset,
        priority: typing.Union[priority, Unset] = unset,
        priorityClassName: typing.Union[priorityClassName, Unset] = unset,
        securityContext: typing.Union['PodSecurityContext', Unset] = unset,
        serviceAccountName: typing.Union[serviceAccountName, Unset] = unset,
        tolerations: typing.Union[tolerations, Unset] = unset,
        volumes: typing.Union[volumes, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'IoArgoprojEventsV1alpha1Template':
        return super().__new__(
            cls,
            *args,
            affinity=affinity,
            container=container,
            imagePullSecrets=imagePullSecrets,
            metadata=metadata,
            nodeSelector=nodeSelector,
            priority=priority,
            priorityClassName=priorityClassName,
            securityContext=securityContext,
            serviceAccountName=serviceAccountName,
            tolerations=tolerations,
            volumes=volumes,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.affinity import Affinity
from argo_workflows.model.container import Container
from argo_workflows.model.io_argoproj_events_v1alpha1_metadata import IoArgoprojEventsV1alpha1Metadata
from argo_workflows.model.local_object_reference import LocalObjectReference
from argo_workflows.model.pod_security_context import PodSecurityContext
from argo_workflows.model.toleration import Toleration
from argo_workflows.model.volume import Volume
