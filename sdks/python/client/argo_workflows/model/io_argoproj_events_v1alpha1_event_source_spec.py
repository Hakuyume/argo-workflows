# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class IoArgoprojEventsV1alpha1EventSourceSpec(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    
    
    class amqp(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1AMQPEventSource']:
            return IoArgoprojEventsV1alpha1AMQPEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'amqp':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class azureEventsHub(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1AzureEventsHubEventSource']:
            return IoArgoprojEventsV1alpha1AzureEventsHubEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'azureEventsHub':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class bitbucket(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1BitbucketEventSource']:
            return IoArgoprojEventsV1alpha1BitbucketEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'bitbucket':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class bitbucketserver(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1BitbucketServerEventSource']:
            return IoArgoprojEventsV1alpha1BitbucketServerEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'bitbucketserver':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class calendar(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1CalendarEventSource']:
            return IoArgoprojEventsV1alpha1CalendarEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'calendar':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class emitter(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1EmitterEventSource']:
            return IoArgoprojEventsV1alpha1EmitterEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'emitter':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    eventBusName = StrSchema
    
    
    class file(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1FileEventSource']:
            return IoArgoprojEventsV1alpha1FileEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'file':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class generic(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1GenericEventSource']:
            return IoArgoprojEventsV1alpha1GenericEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'generic':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class github(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1GithubEventSource']:
            return IoArgoprojEventsV1alpha1GithubEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'github':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class gitlab(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1GitlabEventSource']:
            return IoArgoprojEventsV1alpha1GitlabEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'gitlab':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class hdfs(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1HDFSEventSource']:
            return IoArgoprojEventsV1alpha1HDFSEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'hdfs':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class kafka(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1KafkaEventSource']:
            return IoArgoprojEventsV1alpha1KafkaEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'kafka':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class minio(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1S3Artifact']:
            return IoArgoprojEventsV1alpha1S3Artifact
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'minio':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class mqtt(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1MQTTEventSource']:
            return IoArgoprojEventsV1alpha1MQTTEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'mqtt':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class nats(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1NATSEventsSource']:
            return IoArgoprojEventsV1alpha1NATSEventsSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'nats':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class nsq(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1NSQEventSource']:
            return IoArgoprojEventsV1alpha1NSQEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'nsq':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class pubSub(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1PubSubEventSource']:
            return IoArgoprojEventsV1alpha1PubSubEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'pubSub':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class pulsar(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1PulsarEventSource']:
            return IoArgoprojEventsV1alpha1PulsarEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'pulsar':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class redis(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1RedisEventSource']:
            return IoArgoprojEventsV1alpha1RedisEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'redis':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    replicas = IntSchema
    
    
    class resource(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1ResourceEventSource']:
            return IoArgoprojEventsV1alpha1ResourceEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'resource':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )

    @classmethod
    @property
    def service(cls) -> typing.Type['IoArgoprojEventsV1alpha1Service']:
        return IoArgoprojEventsV1alpha1Service
    
    
    class slack(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1SlackEventSource']:
            return IoArgoprojEventsV1alpha1SlackEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'slack':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class sns(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1SNSEventSource']:
            return IoArgoprojEventsV1alpha1SNSEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'sns':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class sqs(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1SQSEventSource']:
            return IoArgoprojEventsV1alpha1SQSEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'sqs':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class storageGrid(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1StorageGridEventSource']:
            return IoArgoprojEventsV1alpha1StorageGridEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'storageGrid':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class stripe(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1StripeEventSource']:
            return IoArgoprojEventsV1alpha1StripeEventSource
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'stripe':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )

    @classmethod
    @property
    def template(cls) -> typing.Type['IoArgoprojEventsV1alpha1Template']:
        return IoArgoprojEventsV1alpha1Template
    
    
    class webhook(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojEventsV1alpha1WebhookContext']:
            return IoArgoprojEventsV1alpha1WebhookContext
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'webhook':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        amqp: typing.Union[amqp, Unset] = unset,
        azureEventsHub: typing.Union[azureEventsHub, Unset] = unset,
        bitbucket: typing.Union[bitbucket, Unset] = unset,
        bitbucketserver: typing.Union[bitbucketserver, Unset] = unset,
        calendar: typing.Union[calendar, Unset] = unset,
        emitter: typing.Union[emitter, Unset] = unset,
        eventBusName: typing.Union[eventBusName, Unset] = unset,
        file: typing.Union[file, Unset] = unset,
        generic: typing.Union[generic, Unset] = unset,
        github: typing.Union[github, Unset] = unset,
        gitlab: typing.Union[gitlab, Unset] = unset,
        hdfs: typing.Union[hdfs, Unset] = unset,
        kafka: typing.Union[kafka, Unset] = unset,
        minio: typing.Union[minio, Unset] = unset,
        mqtt: typing.Union[mqtt, Unset] = unset,
        nats: typing.Union[nats, Unset] = unset,
        nsq: typing.Union[nsq, Unset] = unset,
        pubSub: typing.Union[pubSub, Unset] = unset,
        pulsar: typing.Union[pulsar, Unset] = unset,
        redis: typing.Union[redis, Unset] = unset,
        replicas: typing.Union[replicas, Unset] = unset,
        resource: typing.Union[resource, Unset] = unset,
        service: typing.Union['IoArgoprojEventsV1alpha1Service', Unset] = unset,
        slack: typing.Union[slack, Unset] = unset,
        sns: typing.Union[sns, Unset] = unset,
        sqs: typing.Union[sqs, Unset] = unset,
        storageGrid: typing.Union[storageGrid, Unset] = unset,
        stripe: typing.Union[stripe, Unset] = unset,
        template: typing.Union['IoArgoprojEventsV1alpha1Template', Unset] = unset,
        webhook: typing.Union[webhook, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'IoArgoprojEventsV1alpha1EventSourceSpec':
        return super().__new__(
            cls,
            *args,
            amqp=amqp,
            azureEventsHub=azureEventsHub,
            bitbucket=bitbucket,
            bitbucketserver=bitbucketserver,
            calendar=calendar,
            emitter=emitter,
            eventBusName=eventBusName,
            file=file,
            generic=generic,
            github=github,
            gitlab=gitlab,
            hdfs=hdfs,
            kafka=kafka,
            minio=minio,
            mqtt=mqtt,
            nats=nats,
            nsq=nsq,
            pubSub=pubSub,
            pulsar=pulsar,
            redis=redis,
            replicas=replicas,
            resource=resource,
            service=service,
            slack=slack,
            sns=sns,
            sqs=sqs,
            storageGrid=storageGrid,
            stripe=stripe,
            template=template,
            webhook=webhook,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.io_argoproj_events_v1alpha1_amqp_event_source import IoArgoprojEventsV1alpha1AMQPEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_azure_events_hub_event_source import IoArgoprojEventsV1alpha1AzureEventsHubEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_bitbucket_event_source import IoArgoprojEventsV1alpha1BitbucketEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_bitbucket_server_event_source import IoArgoprojEventsV1alpha1BitbucketServerEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_calendar_event_source import IoArgoprojEventsV1alpha1CalendarEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_emitter_event_source import IoArgoprojEventsV1alpha1EmitterEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_file_event_source import IoArgoprojEventsV1alpha1FileEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_generic_event_source import IoArgoprojEventsV1alpha1GenericEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_github_event_source import IoArgoprojEventsV1alpha1GithubEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_gitlab_event_source import IoArgoprojEventsV1alpha1GitlabEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_hdfs_event_source import IoArgoprojEventsV1alpha1HDFSEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_kafka_event_source import IoArgoprojEventsV1alpha1KafkaEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_mqtt_event_source import IoArgoprojEventsV1alpha1MQTTEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_nats_events_source import IoArgoprojEventsV1alpha1NATSEventsSource
from argo_workflows.model.io_argoproj_events_v1alpha1_nsq_event_source import IoArgoprojEventsV1alpha1NSQEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_pub_sub_event_source import IoArgoprojEventsV1alpha1PubSubEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_pulsar_event_source import IoArgoprojEventsV1alpha1PulsarEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_redis_event_source import IoArgoprojEventsV1alpha1RedisEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_resource_event_source import IoArgoprojEventsV1alpha1ResourceEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_s3_artifact import IoArgoprojEventsV1alpha1S3Artifact
from argo_workflows.model.io_argoproj_events_v1alpha1_service import IoArgoprojEventsV1alpha1Service
from argo_workflows.model.io_argoproj_events_v1alpha1_slack_event_source import IoArgoprojEventsV1alpha1SlackEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_sns_event_source import IoArgoprojEventsV1alpha1SNSEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_sqs_event_source import IoArgoprojEventsV1alpha1SQSEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_storage_grid_event_source import IoArgoprojEventsV1alpha1StorageGridEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_stripe_event_source import IoArgoprojEventsV1alpha1StripeEventSource
from argo_workflows.model.io_argoproj_events_v1alpha1_template import IoArgoprojEventsV1alpha1Template
from argo_workflows.model.io_argoproj_events_v1alpha1_webhook_context import IoArgoprojEventsV1alpha1WebhookContext
