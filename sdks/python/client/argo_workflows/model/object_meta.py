# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class ObjectMeta(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
    """
    
    
    class annotations(
        DictSchema
    ):
        _additional_properties = StrSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'annotations':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    clusterName = StrSchema
    creationTimestamp = DateTimeSchema
    deletionGracePeriodSeconds = IntSchema
    deletionTimestamp = DateTimeSchema
    
    
    class finalizers(
        ListSchema
    ):
        _items = StrSchema
    generateName = StrSchema
    generation = IntSchema
    
    
    class labels(
        DictSchema
    ):
        _additional_properties = StrSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'labels':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class managedFields(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['ManagedFieldsEntry']:
            return ManagedFieldsEntry
    name = StrSchema
    namespace = StrSchema
    
    
    class ownerReferences(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['OwnerReference']:
            return OwnerReference
    resourceVersion = StrSchema
    selfLink = StrSchema
    uid = StrSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        annotations: typing.Union[annotations, Unset] = unset,
        clusterName: typing.Union[clusterName, Unset] = unset,
        creationTimestamp: typing.Union[creationTimestamp, Unset] = unset,
        deletionGracePeriodSeconds: typing.Union[deletionGracePeriodSeconds, Unset] = unset,
        deletionTimestamp: typing.Union[deletionTimestamp, Unset] = unset,
        finalizers: typing.Union[finalizers, Unset] = unset,
        generateName: typing.Union[generateName, Unset] = unset,
        generation: typing.Union[generation, Unset] = unset,
        labels: typing.Union[labels, Unset] = unset,
        managedFields: typing.Union[managedFields, Unset] = unset,
        name: typing.Union[name, Unset] = unset,
        namespace: typing.Union[namespace, Unset] = unset,
        ownerReferences: typing.Union[ownerReferences, Unset] = unset,
        resourceVersion: typing.Union[resourceVersion, Unset] = unset,
        selfLink: typing.Union[selfLink, Unset] = unset,
        uid: typing.Union[uid, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'ObjectMeta':
        return super().__new__(
            cls,
            *args,
            annotations=annotations,
            clusterName=clusterName,
            creationTimestamp=creationTimestamp,
            deletionGracePeriodSeconds=deletionGracePeriodSeconds,
            deletionTimestamp=deletionTimestamp,
            finalizers=finalizers,
            generateName=generateName,
            generation=generation,
            labels=labels,
            managedFields=managedFields,
            name=name,
            namespace=namespace,
            ownerReferences=ownerReferences,
            resourceVersion=resourceVersion,
            selfLink=selfLink,
            uid=uid,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.managed_fields_entry import ManagedFieldsEntry
from argo_workflows.model.owner_reference import OwnerReference
