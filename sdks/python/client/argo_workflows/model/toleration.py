# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class Toleration(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
    """
    
    
    class effect(
        _SchemaEnumMaker(
            enum_value_to_name={
                "NoExecute": "NOEXECUTE",
                "NoSchedule": "NOSCHEDULE",
                "PreferNoSchedule": "PREFERNOSCHEDULE",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def NOEXECUTE(cls):
            return cls("NoExecute")
        
        @classmethod
        @property
        def NOSCHEDULE(cls):
            return cls("NoSchedule")
        
        @classmethod
        @property
        def PREFERNOSCHEDULE(cls):
            return cls("PreferNoSchedule")
    key = StrSchema
    
    
    class operator(
        _SchemaEnumMaker(
            enum_value_to_name={
                "Equal": "EQUAL",
                "Exists": "EXISTS",
            }
        ),
        StrSchema
    ):
        
        @classmethod
        @property
        def EQUAL(cls):
            return cls("Equal")
        
        @classmethod
        @property
        def EXISTS(cls):
            return cls("Exists")
    tolerationSeconds = IntSchema
    value = StrSchema


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        effect: typing.Union[effect, Unset] = unset,
        key: typing.Union[key, Unset] = unset,
        operator: typing.Union[operator, Unset] = unset,
        tolerationSeconds: typing.Union[tolerationSeconds, Unset] = unset,
        value: typing.Union[value, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'Toleration':
        return super().__new__(
            cls,
            *args,
            effect=effect,
            key=key,
            operator=operator,
            tolerationSeconds=tolerationSeconds,
            value=value,
            _configuration=_configuration,
            **kwargs,
        )
