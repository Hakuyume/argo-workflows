# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class IoArgoprojWorkflowV1alpha1WorkflowSpec(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    WorkflowSpec is the specification of a Workflow.
    """
    activeDeadlineSeconds = IntSchema

    @classmethod
    @property
    def affinity(cls) -> typing.Type['Affinity']:
        return Affinity
    archiveLogs = BoolSchema

    @classmethod
    @property
    def arguments(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Arguments']:
        return IoArgoprojWorkflowV1alpha1Arguments

    @classmethod
    @property
    def artifactGC(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1ArtifactGC']:
        return IoArgoprojWorkflowV1alpha1ArtifactGC

    @classmethod
    @property
    def artifactRepositoryRef(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef']:
        return IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef
    automountServiceAccountToken = BoolSchema

    @classmethod
    @property
    def dnsConfig(cls) -> typing.Type['PodDNSConfig']:
        return PodDNSConfig
    dnsPolicy = StrSchema
    entrypoint = StrSchema

    @classmethod
    @property
    def executor(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1ExecutorConfig']:
        return IoArgoprojWorkflowV1alpha1ExecutorConfig
    
    
    class hooks(
        DictSchema
    ):
    
        @classmethod
        @property
        def _additional_properties(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1LifecycleHook']:
            return IoArgoprojWorkflowV1alpha1LifecycleHook
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'hooks':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    
    
    class hostAliases(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['HostAlias']:
            return HostAlias
    hostNetwork = BoolSchema
    
    
    class imagePullSecrets(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['LocalObjectReference']:
            return LocalObjectReference

    @classmethod
    @property
    def metrics(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Metrics']:
        return IoArgoprojWorkflowV1alpha1Metrics
    
    
    class nodeSelector(
        DictSchema
    ):
        _additional_properties = StrSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'nodeSelector':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    onExit = StrSchema
    parallelism = IntSchema

    @classmethod
    @property
    def podDisruptionBudget(cls) -> typing.Type['IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec']:
        return IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec

    @classmethod
    @property
    def podGC(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1PodGC']:
        return IoArgoprojWorkflowV1alpha1PodGC

    @classmethod
    @property
    def podMetadata(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Metadata']:
        return IoArgoprojWorkflowV1alpha1Metadata
    podPriority = IntSchema
    podPriorityClassName = StrSchema
    podSpecPatch = StrSchema
    priority = IntSchema

    @classmethod
    @property
    def retryStrategy(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1RetryStrategy']:
        return IoArgoprojWorkflowV1alpha1RetryStrategy
    schedulerName = StrSchema

    @classmethod
    @property
    def securityContext(cls) -> typing.Type['PodSecurityContext']:
        return PodSecurityContext
    serviceAccountName = StrSchema
    shutdown = StrSchema
    suspend = BoolSchema

    @classmethod
    @property
    def synchronization(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Synchronization']:
        return IoArgoprojWorkflowV1alpha1Synchronization

    @classmethod
    @property
    def templateDefaults(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Template']:
        return IoArgoprojWorkflowV1alpha1Template
    
    
    class templates(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1Template']:
            return IoArgoprojWorkflowV1alpha1Template
    
    
    class tolerations(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['Toleration']:
            return Toleration

    @classmethod
    @property
    def ttlStrategy(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1TTLStrategy']:
        return IoArgoprojWorkflowV1alpha1TTLStrategy

    @classmethod
    @property
    def volumeClaimGC(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1VolumeClaimGC']:
        return IoArgoprojWorkflowV1alpha1VolumeClaimGC
    
    
    class volumeClaimTemplates(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['PersistentVolumeClaim']:
            return PersistentVolumeClaim
    
    
    class volumes(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['Volume']:
            return Volume

    @classmethod
    @property
    def workflowMetadata(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1WorkflowMetadata']:
        return IoArgoprojWorkflowV1alpha1WorkflowMetadata

    @classmethod
    @property
    def workflowTemplateRef(cls) -> typing.Type['IoArgoprojWorkflowV1alpha1WorkflowTemplateRef']:
        return IoArgoprojWorkflowV1alpha1WorkflowTemplateRef


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        activeDeadlineSeconds: typing.Union[activeDeadlineSeconds, Unset] = unset,
        affinity: typing.Union['Affinity', Unset] = unset,
        archiveLogs: typing.Union[archiveLogs, Unset] = unset,
        arguments: typing.Union['IoArgoprojWorkflowV1alpha1Arguments', Unset] = unset,
        artifactGC: typing.Union['IoArgoprojWorkflowV1alpha1ArtifactGC', Unset] = unset,
        artifactRepositoryRef: typing.Union['IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef', Unset] = unset,
        automountServiceAccountToken: typing.Union[automountServiceAccountToken, Unset] = unset,
        dnsConfig: typing.Union['PodDNSConfig', Unset] = unset,
        dnsPolicy: typing.Union[dnsPolicy, Unset] = unset,
        entrypoint: typing.Union[entrypoint, Unset] = unset,
        executor: typing.Union['IoArgoprojWorkflowV1alpha1ExecutorConfig', Unset] = unset,
        hooks: typing.Union[hooks, Unset] = unset,
        hostAliases: typing.Union[hostAliases, Unset] = unset,
        hostNetwork: typing.Union[hostNetwork, Unset] = unset,
        imagePullSecrets: typing.Union[imagePullSecrets, Unset] = unset,
        metrics: typing.Union['IoArgoprojWorkflowV1alpha1Metrics', Unset] = unset,
        nodeSelector: typing.Union[nodeSelector, Unset] = unset,
        onExit: typing.Union[onExit, Unset] = unset,
        parallelism: typing.Union[parallelism, Unset] = unset,
        podDisruptionBudget: typing.Union['IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec', Unset] = unset,
        podGC: typing.Union['IoArgoprojWorkflowV1alpha1PodGC', Unset] = unset,
        podMetadata: typing.Union['IoArgoprojWorkflowV1alpha1Metadata', Unset] = unset,
        podPriority: typing.Union[podPriority, Unset] = unset,
        podPriorityClassName: typing.Union[podPriorityClassName, Unset] = unset,
        podSpecPatch: typing.Union[podSpecPatch, Unset] = unset,
        priority: typing.Union[priority, Unset] = unset,
        retryStrategy: typing.Union['IoArgoprojWorkflowV1alpha1RetryStrategy', Unset] = unset,
        schedulerName: typing.Union[schedulerName, Unset] = unset,
        securityContext: typing.Union['PodSecurityContext', Unset] = unset,
        serviceAccountName: typing.Union[serviceAccountName, Unset] = unset,
        shutdown: typing.Union[shutdown, Unset] = unset,
        suspend: typing.Union[suspend, Unset] = unset,
        synchronization: typing.Union['IoArgoprojWorkflowV1alpha1Synchronization', Unset] = unset,
        templateDefaults: typing.Union['IoArgoprojWorkflowV1alpha1Template', Unset] = unset,
        templates: typing.Union[templates, Unset] = unset,
        tolerations: typing.Union[tolerations, Unset] = unset,
        ttlStrategy: typing.Union['IoArgoprojWorkflowV1alpha1TTLStrategy', Unset] = unset,
        volumeClaimGC: typing.Union['IoArgoprojWorkflowV1alpha1VolumeClaimGC', Unset] = unset,
        volumeClaimTemplates: typing.Union[volumeClaimTemplates, Unset] = unset,
        volumes: typing.Union[volumes, Unset] = unset,
        workflowMetadata: typing.Union['IoArgoprojWorkflowV1alpha1WorkflowMetadata', Unset] = unset,
        workflowTemplateRef: typing.Union['IoArgoprojWorkflowV1alpha1WorkflowTemplateRef', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'IoArgoprojWorkflowV1alpha1WorkflowSpec':
        return super().__new__(
            cls,
            *args,
            activeDeadlineSeconds=activeDeadlineSeconds,
            affinity=affinity,
            archiveLogs=archiveLogs,
            arguments=arguments,
            artifactGC=artifactGC,
            artifactRepositoryRef=artifactRepositoryRef,
            automountServiceAccountToken=automountServiceAccountToken,
            dnsConfig=dnsConfig,
            dnsPolicy=dnsPolicy,
            entrypoint=entrypoint,
            executor=executor,
            hooks=hooks,
            hostAliases=hostAliases,
            hostNetwork=hostNetwork,
            imagePullSecrets=imagePullSecrets,
            metrics=metrics,
            nodeSelector=nodeSelector,
            onExit=onExit,
            parallelism=parallelism,
            podDisruptionBudget=podDisruptionBudget,
            podGC=podGC,
            podMetadata=podMetadata,
            podPriority=podPriority,
            podPriorityClassName=podPriorityClassName,
            podSpecPatch=podSpecPatch,
            priority=priority,
            retryStrategy=retryStrategy,
            schedulerName=schedulerName,
            securityContext=securityContext,
            serviceAccountName=serviceAccountName,
            shutdown=shutdown,
            suspend=suspend,
            synchronization=synchronization,
            templateDefaults=templateDefaults,
            templates=templates,
            tolerations=tolerations,
            ttlStrategy=ttlStrategy,
            volumeClaimGC=volumeClaimGC,
            volumeClaimTemplates=volumeClaimTemplates,
            volumes=volumes,
            workflowMetadata=workflowMetadata,
            workflowTemplateRef=workflowTemplateRef,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.affinity import Affinity
from argo_workflows.model.host_alias import HostAlias
from argo_workflows.model.io_argoproj_workflow_v1alpha1_arguments import IoArgoprojWorkflowV1alpha1Arguments
from argo_workflows.model.io_argoproj_workflow_v1alpha1_artifact_gc import IoArgoprojWorkflowV1alpha1ArtifactGC
from argo_workflows.model.io_argoproj_workflow_v1alpha1_artifact_repository_ref import IoArgoprojWorkflowV1alpha1ArtifactRepositoryRef
from argo_workflows.model.io_argoproj_workflow_v1alpha1_executor_config import IoArgoprojWorkflowV1alpha1ExecutorConfig
from argo_workflows.model.io_argoproj_workflow_v1alpha1_lifecycle_hook import IoArgoprojWorkflowV1alpha1LifecycleHook
from argo_workflows.model.io_argoproj_workflow_v1alpha1_metadata import IoArgoprojWorkflowV1alpha1Metadata
from argo_workflows.model.io_argoproj_workflow_v1alpha1_metrics import IoArgoprojWorkflowV1alpha1Metrics
from argo_workflows.model.io_argoproj_workflow_v1alpha1_pod_gc import IoArgoprojWorkflowV1alpha1PodGC
from argo_workflows.model.io_argoproj_workflow_v1alpha1_retry_strategy import IoArgoprojWorkflowV1alpha1RetryStrategy
from argo_workflows.model.io_argoproj_workflow_v1alpha1_synchronization import IoArgoprojWorkflowV1alpha1Synchronization
from argo_workflows.model.io_argoproj_workflow_v1alpha1_template import IoArgoprojWorkflowV1alpha1Template
from argo_workflows.model.io_argoproj_workflow_v1alpha1_ttl_strategy import IoArgoprojWorkflowV1alpha1TTLStrategy
from argo_workflows.model.io_argoproj_workflow_v1alpha1_volume_claim_gc import IoArgoprojWorkflowV1alpha1VolumeClaimGC
from argo_workflows.model.io_argoproj_workflow_v1alpha1_workflow_metadata import IoArgoprojWorkflowV1alpha1WorkflowMetadata
from argo_workflows.model.io_argoproj_workflow_v1alpha1_workflow_template_ref import IoArgoprojWorkflowV1alpha1WorkflowTemplateRef
from argo_workflows.model.io_k8s_api_policy_v1beta1_pod_disruption_budget_spec import IoK8sApiPolicyV1beta1PodDisruptionBudgetSpec
from argo_workflows.model.local_object_reference import LocalObjectReference
from argo_workflows.model.persistent_volume_claim import PersistentVolumeClaim
from argo_workflows.model.pod_dns_config import PodDNSConfig
from argo_workflows.model.pod_security_context import PodSecurityContext
from argo_workflows.model.toleration import Toleration
from argo_workflows.model.volume import Volume
