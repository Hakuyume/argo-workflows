# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class SecurityContext(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
    """
    allowPrivilegeEscalation = BoolSchema

    @classmethod
    @property
    def capabilities(cls) -> typing.Type['Capabilities']:
        return Capabilities
    privileged = BoolSchema
    procMount = StrSchema
    readOnlyRootFilesystem = BoolSchema
    runAsGroup = IntSchema
    runAsNonRoot = BoolSchema
    runAsUser = IntSchema

    @classmethod
    @property
    def seLinuxOptions(cls) -> typing.Type['SELinuxOptions']:
        return SELinuxOptions

    @classmethod
    @property
    def seccompProfile(cls) -> typing.Type['SeccompProfile']:
        return SeccompProfile

    @classmethod
    @property
    def windowsOptions(cls) -> typing.Type['WindowsSecurityContextOptions']:
        return WindowsSecurityContextOptions


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        allowPrivilegeEscalation: typing.Union[allowPrivilegeEscalation, Unset] = unset,
        capabilities: typing.Union['Capabilities', Unset] = unset,
        privileged: typing.Union[privileged, Unset] = unset,
        procMount: typing.Union[procMount, Unset] = unset,
        readOnlyRootFilesystem: typing.Union[readOnlyRootFilesystem, Unset] = unset,
        runAsGroup: typing.Union[runAsGroup, Unset] = unset,
        runAsNonRoot: typing.Union[runAsNonRoot, Unset] = unset,
        runAsUser: typing.Union[runAsUser, Unset] = unset,
        seLinuxOptions: typing.Union['SELinuxOptions', Unset] = unset,
        seccompProfile: typing.Union['SeccompProfile', Unset] = unset,
        windowsOptions: typing.Union['WindowsSecurityContextOptions', Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'SecurityContext':
        return super().__new__(
            cls,
            *args,
            allowPrivilegeEscalation=allowPrivilegeEscalation,
            capabilities=capabilities,
            privileged=privileged,
            procMount=procMount,
            readOnlyRootFilesystem=readOnlyRootFilesystem,
            runAsGroup=runAsGroup,
            runAsNonRoot=runAsNonRoot,
            runAsUser=runAsUser,
            seLinuxOptions=seLinuxOptions,
            seccompProfile=seccompProfile,
            windowsOptions=windowsOptions,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.capabilities import Capabilities
from argo_workflows.model.se_linux_options import SELinuxOptions
from argo_workflows.model.seccomp_profile import SeccompProfile
from argo_workflows.model.windows_security_context_options import WindowsSecurityContextOptions
