# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""

import re  # noqa: F401
import sys  # noqa: F401
import typing  # noqa: F401
import functools  # noqa: F401

from frozendict import frozendict  # noqa: F401

import decimal  # noqa: F401
from datetime import date, datetime  # noqa: F401
from frozendict import frozendict  # noqa: F401

from argo_workflows.schemas import (  # noqa: F401
    AnyTypeSchema,
    ComposedSchema,
    DictSchema,
    ListSchema,
    StrSchema,
    IntSchema,
    Int32Schema,
    Int64Schema,
    Float32Schema,
    Float64Schema,
    NumberSchema,
    UUIDSchema,
    DateSchema,
    DateTimeSchema,
    DecimalSchema,
    BoolSchema,
    BinarySchema,
    NoneSchema,
    none_type,
    Configuration,
    Unset,
    unset,
    ComposedBase,
    ListBase,
    DictBase,
    NoneBase,
    StrBase,
    IntBase,
    Int32Base,
    Int64Base,
    Float32Base,
    Float64Base,
    NumberBase,
    UUIDBase,
    DateBase,
    DateTimeBase,
    BoolBase,
    BinaryBase,
    Schema,
    _SchemaValidator,
    _SchemaTypeChecker,
    _SchemaEnumMaker
)


class GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec(
    DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    @classmethod
    @property
    def affinity(cls) -> typing.Type['Affinity']:
        return Affinity

    @classmethod
    @property
    def cat(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Cat']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Cat

    @classmethod
    @property
    def code(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Code']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Code

    @classmethod
    @property
    def container(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Container']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Container

    @classmethod
    @property
    def dedupe(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Dedupe']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Dedupe

    @classmethod
    @property
    def expand(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Expand']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Expand

    @classmethod
    @property
    def filter(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter

    @classmethod
    @property
    def flatten(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Flatten']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Flatten

    @classmethod
    @property
    def git(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Git']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Git

    @classmethod
    @property
    def group(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Group']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Group
    
    
    class imagePullSecrets(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['LocalObjectReference']:
            return LocalObjectReference

    @classmethod
    @property
    def map(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Map']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Map

    @classmethod
    @property
    def metadata(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Metadata']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Metadata
    name = StrSchema
    
    
    class nodeSelector(
        DictSchema
    ):
        _additional_properties = StrSchema
    
    
        def __new__(
            cls,
            *args: typing.Union[dict, frozendict, ],
            _configuration: typing.Optional[Configuration] = None,
            **kwargs: typing.Type[Schema],
        ) -> 'nodeSelector':
            return super().__new__(
                cls,
                *args,
                _configuration=_configuration,
                **kwargs,
            )
    replicas = IntSchema
    restartPolicy = StrSchema

    @classmethod
    @property
    def scale(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Scale']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Scale
    serviceAccountName = StrSchema

    @classmethod
    @property
    def sidecar(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Sidecar']:
        return GithubComArgoprojLabsArgoDataflowApiV1alpha1Sidecar
    
    
    class sinks(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink']:
            return GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink
    
    
    class sources(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['GithubComArgoprojLabsArgoDataflowApiV1alpha1Source']:
            return GithubComArgoprojLabsArgoDataflowApiV1alpha1Source
    terminator = BoolSchema
    
    
    class tolerations(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['Toleration']:
            return Toleration
    
    
    class volumes(
        ListSchema
    ):
    
        @classmethod
        @property
        def _items(cls) -> typing.Type['Volume']:
            return Volume


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict, ],
        affinity: typing.Union['Affinity', Unset] = unset,
        cat: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Cat', Unset] = unset,
        code: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Code', Unset] = unset,
        container: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Container', Unset] = unset,
        dedupe: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Dedupe', Unset] = unset,
        expand: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Expand', Unset] = unset,
        filter: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter', Unset] = unset,
        flatten: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Flatten', Unset] = unset,
        git: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Git', Unset] = unset,
        group: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Group', Unset] = unset,
        imagePullSecrets: typing.Union[imagePullSecrets, Unset] = unset,
        map: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Map', Unset] = unset,
        metadata: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Metadata', Unset] = unset,
        name: typing.Union[name, Unset] = unset,
        nodeSelector: typing.Union[nodeSelector, Unset] = unset,
        replicas: typing.Union[replicas, Unset] = unset,
        restartPolicy: typing.Union[restartPolicy, Unset] = unset,
        scale: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Scale', Unset] = unset,
        serviceAccountName: typing.Union[serviceAccountName, Unset] = unset,
        sidecar: typing.Union['GithubComArgoprojLabsArgoDataflowApiV1alpha1Sidecar', Unset] = unset,
        sinks: typing.Union[sinks, Unset] = unset,
        sources: typing.Union[sources, Unset] = unset,
        terminator: typing.Union[terminator, Unset] = unset,
        tolerations: typing.Union[tolerations, Unset] = unset,
        volumes: typing.Union[volumes, Unset] = unset,
        _configuration: typing.Optional[Configuration] = None,
        **kwargs: typing.Type[Schema],
    ) -> 'GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec':
        return super().__new__(
            cls,
            *args,
            affinity=affinity,
            cat=cat,
            code=code,
            container=container,
            dedupe=dedupe,
            expand=expand,
            filter=filter,
            flatten=flatten,
            git=git,
            group=group,
            imagePullSecrets=imagePullSecrets,
            map=map,
            metadata=metadata,
            name=name,
            nodeSelector=nodeSelector,
            replicas=replicas,
            restartPolicy=restartPolicy,
            scale=scale,
            serviceAccountName=serviceAccountName,
            sidecar=sidecar,
            sinks=sinks,
            sources=sources,
            terminator=terminator,
            tolerations=tolerations,
            volumes=volumes,
            _configuration=_configuration,
            **kwargs,
        )

from argo_workflows.model.affinity import Affinity
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_cat import GithubComArgoprojLabsArgoDataflowApiV1alpha1Cat
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_code import GithubComArgoprojLabsArgoDataflowApiV1alpha1Code
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_container import GithubComArgoprojLabsArgoDataflowApiV1alpha1Container
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_dedupe import GithubComArgoprojLabsArgoDataflowApiV1alpha1Dedupe
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_expand import GithubComArgoprojLabsArgoDataflowApiV1alpha1Expand
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_filter import GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_flatten import GithubComArgoprojLabsArgoDataflowApiV1alpha1Flatten
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_git import GithubComArgoprojLabsArgoDataflowApiV1alpha1Git
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_group import GithubComArgoprojLabsArgoDataflowApiV1alpha1Group
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_map import GithubComArgoprojLabsArgoDataflowApiV1alpha1Map
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_metadata import GithubComArgoprojLabsArgoDataflowApiV1alpha1Metadata
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_scale import GithubComArgoprojLabsArgoDataflowApiV1alpha1Scale
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_sidecar import GithubComArgoprojLabsArgoDataflowApiV1alpha1Sidecar
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_sink import GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink
from argo_workflows.model.github_com_argoproj_labs_argo_dataflow_api_v1alpha1_source import GithubComArgoprojLabsArgoDataflowApiV1alpha1Source
from argo_workflows.model.local_object_reference import LocalObjectReference
from argo_workflows.model.toleration import Toleration
from argo_workflows.model.volume import Volume
